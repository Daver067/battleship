(()=>{"use strict";var n={192:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".gridify{margin:auto;width:25vw;height:25vw;display:flex;flex-direction:column}.row{display:flex;width:100%;height:100%}.cell{width:100%;height:100%;border:1px solid #000}.cell:hover{background-color:bisque;cursor:pointer}.moduleBackground{position:absolute;top:0;left:0;width:100vw;height:100vh;background-color:#fff}.moduleBackground h1{color:#000;align-self:center;font-size:5rem;text-align:center;padding:.25em 0}.carrier{display:flex;height:2.5vw;width:12.5vw;background-color:gray;margin:auto}.carrier.flip{height:12.5vw;width:2.5vw;flex-direction:column}.battleship{display:flex;height:2.5vw;width:10vw;background-color:gray;margin:auto}.battleship.flip{height:10vw;width:2.5vw;flex-direction:column}.cruiser{display:flex;height:2.5vw;width:7.5vw;background-color:gray;margin:auto}.cruiser.flip{height:7.5vw;width:2.5vw;flex-direction:column}.sub{display:flex;height:2.5vw;width:7.5vw;background-color:gray;margin:auto}.sub.flip{height:7.5vw;width:2.5vw;flex-direction:column}.patrolBoat{display:flex;height:2.5vw;width:5vw;background-color:gray;margin:auto}.patrolBoat.flip{height:5vw;width:2.5vw;flex-direction:column}.shipAndFlip{display:flex;flex-direction:column}.shipAndFlip h2{color:#000;align-self:center;font-size:3rem;text-align:center;padding:.5em 0 0 0}#rotate{height:5vw;padding:0 2em;align-self:center;font-size:1.25rem;margin:0 0 1em 0;border-radius:18px}div .human[boat=carrier]{background-color:#000}div .human[boat=battleship]{background-color:#000}div .human[boat=cruiser]{background-color:#000}div .human[boat=sub]{background-color:#000}div .human[boat=patrolBoat]{background-color:#000}div .human[boat=null]{background-color:#fff}div .human[boat=null]:hover{background-color:#faebd7}*{box-sizing:border-box;margin:0;padding:0}h1{color:red}","",{version:3,sources:["webpack://./src/scss/_grid.scss","webpack://./src/scss/_variableAndFunctions.scss","webpack://./src/scss/_placeShips.scss","webpack://./src/style.scss"],names:[],mappings:"AAEA,SACE,WAAA,CACA,UAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CAEF,KACE,YAAA,CACA,UAAA,CACA,WAAA,CAGF,MACE,UAAA,CACA,WAAA,CACA,qBCXY,CDYZ,YACE,uBAAA,CACA,cAAA,CEnBJ,kBAEE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CACA,qBACE,UAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,eAAA,CAIJ,SACE,YAAA,CACA,YAAA,CACA,YAAA,CACA,qBAAA,CACA,WAAA,CACA,cACE,aAAA,CACA,WAAA,CACA,qBAAA,CAGJ,YACE,YAAA,CACA,YAAA,CACA,UAAA,CACA,qBAAA,CACA,WAAA,CACA,iBACE,WAAA,CACA,WAAA,CACA,qBAAA,CAGJ,SACE,YAAA,CACA,YAAA,CACA,WAAA,CACA,qBAAA,CACA,WAAA,CACA,cACE,YAAA,CACA,WAAA,CACA,qBAAA,CAGJ,KACE,YAAA,CACA,YAAA,CACA,WAAA,CACA,qBAAA,CACA,WAAA,CACA,UACE,YAAA,CACA,WAAA,CACA,qBAAA,CAGJ,YACE,YAAA,CACA,YAAA,CACA,SAAA,CACA,qBAAA,CACA,WAAA,CACA,iBACE,UAAA,CACA,WAAA,CACA,qBAAA,CAIJ,aACE,YAAA,CACA,qBAAA,CACA,gBACE,UAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,kBAAA,CAIJ,QACE,UAAA,CACA,aAAA,CACA,iBAAA,CACA,iBAAA,CACA,gBAAA,CACA,kBAAA,CAKE,yBACE,qBAAA,CAEF,4BACE,qBAAA,CAEF,yBACE,qBAAA,CAEF,qBACE,qBAAA,CAEF,4BACE,qBAAA,CAEF,sBACE,qBAAA,CACA,4BACE,wBAAA,CCtHR,EACE,qBAAA,CACA,QAAA,CACA,SAAA,CAGF,GACE,SAAA",sourcesContent:['@import "../scss/variableAndFunctions";\n\n.gridify {\n  margin: auto;\n  width: 25vw;\n  height: 25vw;\n  display: flex;\n  flex-direction: column;\n}\n.row {\n  display: flex;\n  width: 100%;\n  height: 100%;\n}\n\n.cell {\n  width: 100%;\n  height: 100%;\n  border: $test-border;\n  &:hover {\n    background-color: bisque;\n    cursor: pointer;\n  }\n}\n','@mixin flexCenter($direction) {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: $direction;\n}\n\n$test-border: 1px solid black;\n$boatColor: black;\n\n$font-weights: (\n  "light": 300,\n  "regular": 400,\n  "medium": 500,\n  "bold": 700,\n);\n\n@function weight($weight-name) {\n  @return map-get($map: $font-weights, $key: $weight-name);\n}\n','@import "../scss/variableAndFunctions";\n\n.moduleBackground {\n  // @include flexCenter(row);\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(255, 255, 255, 1);\n  h1 {\n    color: black;\n    align-self: center;\n    font-size: 5rem;\n    text-align: center;\n    padding: 0.25em 0;\n  }\n}\n\n.carrier {\n  display: flex;\n  height: 2.5vw;\n  width: 12.5vw;\n  background-color: grey;\n  margin: auto;\n  &.flip {\n    height: 12.5vw;\n    width: 2.5vw;\n    flex-direction: column;\n  }\n}\n.battleship {\n  display: flex;\n  height: 2.5vw;\n  width: 10vw;\n  background-color: grey;\n  margin: auto;\n  &.flip {\n    height: 10vw;\n    width: 2.5vw;\n    flex-direction: column;\n  }\n}\n.cruiser {\n  display: flex;\n  height: 2.5vw;\n  width: 7.5vw;\n  background-color: grey;\n  margin: auto;\n  &.flip {\n    height: 7.5vw;\n    width: 2.5vw;\n    flex-direction: column;\n  }\n}\n.sub {\n  display: flex;\n  height: 2.5vw;\n  width: 7.5vw;\n  background-color: grey;\n  margin: auto;\n  &.flip {\n    height: 7.5vw;\n    width: 2.5vw;\n    flex-direction: column;\n  }\n}\n.patrolBoat {\n  display: flex;\n  height: 2.5vw;\n  width: 5vw;\n  background-color: grey;\n  margin: auto;\n  &.flip {\n    height: 5vw;\n    width: 2.5vw;\n    flex-direction: column;\n  }\n}\n\n.shipAndFlip {\n  display: flex;\n  flex-direction: column;\n  h2 {\n    color: black;\n    align-self: center;\n    font-size: 3rem;\n    text-align: center;\n    padding: 0.5em 0 0 0;\n  }\n}\n\n#rotate {\n  height: 5vw;\n  padding: 0 2em;\n  align-self: center;\n  font-size: 1.25rem;\n  margin: 0 0 1em 0;\n  border-radius: 18px;\n}\n\ndiv {\n  & .human {\n    &[boat="carrier"] {\n      background-color: black;\n    }\n    &[boat="battleship"] {\n      background-color: black;\n    }\n    &[boat="cruiser"] {\n      background-color: black;\n    }\n    &[boat="sub"] {\n      background-color: black;\n    }\n    &[boat="patrolBoat"] {\n      background-color: black;\n    }\n    &[boat="null"] {\n      background-color: white;\n      &:hover {\n        background-color: antiquewhite;\n      }\n    }\n  }\n}\n','@import "./scss/grid.scss";\n@import "./scss/placeShips";\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nh1 {\n  color: red;\n}\n'],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var A=this[c][0];null!=A&&(i[A]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var A=n[c],s=r.base?A[0]+r.base:A[0],l=a[s]||0,d="".concat(s," ").concat(l);a[s]=l+1;var u=t(d),h={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==u)e[u].references++,e[u].updater(h);else{var p=o(h,r);r.byIndex=c,e.splice(c,0,{identifier:d,updater:p,references:1})}i.push(d)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var A=r(n,o),s=0;s<a.length;s++){var l=t(a[s]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=A}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{function n(n){const t=document.querySelector("body"),a=r("div","moduleBackground","   <h1>Place Your Ships!</h1><div id=\"playerBoard\"></div><div id='shipType'><h2 id='placeYourThisShip'></div></div>");t.appendChild(a),e(function(n){const e=r("div","human"," "),t=r("div","gridify"," ");return e.appendChild(t),n.gameboard.gameboard.forEach((n=>{const e=r("div","row"," ");n.forEach((n=>{const t=r("div","human"," ");t.classList.add("cell");for(const e in n)t.setAttribute("".concat(e),"".concat(n[e]));e.appendChild(t)})),t.appendChild(e)})),e}(C.players[0]),"#playerBoard"),e(r("div","shipAndFlip","<h2>Click on a square to place your ".concat(n.name,'</h2><button id="rotate">Rotate Ship</button>')),"#shipType");let i='<div class="cell"></div>';for(let e=1;e<n.length;e++)i+='<div class="cell"></div>';var c;e(r("div","".concat(n.name),"".concat(i)),"#shipType"),c=n,document.querySelector(".gridify").addEventListener("mousedown",(n=>{const e=n.target.attributes[3].value[0],t=n.target.attributes[3].value[2];let r;r=document.querySelector(".".concat(c.name)).classList.contains("flip")?"y":"x","error"===C.players[0].gameboard.placeShip(c.name,e,t,r)?console.log("you can't place a ship there!"):o()})),function(n){document.querySelector("button").addEventListener("click",(()=>{!function(n){document.querySelector(".".concat(n)).classList.toggle("flip")}(n)}))}(n.name)}function e(n,e){document.querySelector(e).appendChild(n)}function r(n,e,t){const r=document.createElement(n);return r.classList.add(e),r.innerHTML=t,r}function o(){0===C.players[0].gameboard.ships[0].locations.length?n(C.players[0].gameboard.ships[0]):0===C.players[0].gameboard.ships[1].locations.length?(a(),n(C.players[0].gameboard.ships[1])):0===C.players[0].gameboard.ships[2].locations.length?(a(),n(C.players[0].gameboard.ships[2])):0===C.players[0].gameboard.ships[3].locations.length?(a(),n(C.players[0].gameboard.ships[3])):0===C.players[0].gameboard.ships[4].locations.length?(a(),n(C.players[0].gameboard.ships[4])):(a(),i(),c(C.players[0],C.players[0].humanOrComp),c(C.players[1],C.players[1].humanOrComp))}function a(){const n=document.querySelector("body"),e=document.querySelector(".moduleBackground");n.removeChild(e)}function i(){const n=document.querySelector(".container");for(;n.firstChild;)n.removeChild(n.firstElementChild)}function c(n,e){const t=document.querySelector(".container"),r=A("div","".concat(e)," "),o=A("div","gridify"," ");r.appendChild(o),n.gameboard.gameboard.forEach((n=>{const t=A("div","row"," ");n.forEach((n=>{const r=A("div","".concat(e)," ");r.classList.add("cell");for(const e in n)r.setAttribute("".concat(e),"".concat(n[e]));t.appendChild(r)})),o.appendChild(t)})),r.appendChild(A("h4","boardTitle","This is ".concat(n.name,"'s board"))),t.appendChild(r)}function A(n,e,t){const r=document.createElement(n);return r.classList.add(e),r.innerHTML=t,r}function s(n,e){return{name:n,length:e,locations:[],numHits:0,placeShip(n,e,t){n=Number(n),e=Number(e),this.locations.push({x_axis:e,y_axis:n,hit:!1,cell:"".concat(n,"-").concat(e)});const r=function(){for(let t=1;t<this.length;t++){let r={x_axis:e+1*t,y_axis:n,hit:!1,cell:"".concat(n,"-").concat(e+1*t)};this.locations.push(r)}}.bind(this),o=function(){for(let t=1;t<this.length;t++){let r={x_axis:e,y_axis:n+1*t,hit:!1,cell:"".concat(n+1*t,"-").concat(e)};this.locations.push(r)}}.bind(this);return"x"===t?r():o(),this.locations},hit(n,e){this.locations.forEach((t=>{t.x_axis===e&&t.y_axis===n&&(t.hit=!0,this.numHits++)}))},isSunk(){return this.numHits===this.length}}}function l(){const n=[];for(let e=0;e<7;e++){const t=[];for(let n=0;n<7;n++){const r={boat:null,shotHere:!1,cell:"".concat(e,"-").concat(n)};t.push(r)}n.push(t)}return n}function d(n){let e;switch(n){case"carrier":e=0;break;case"battleship":e=1;break;case"cruiser":e=2;break;case"sub":e=3;break;case"patrolBoat":e=4;break;default:console.log("invalid boat name")}return e}function u(n){return{owner:n,gameboard:l(),ships:[new s("carrier",5),new s("battleship",4),new s("cruiser",3),new s("sub",3),new s("patrolBoat",2)],placeShip(n,e,t,r){const o=d(n);if("error"===function(n,e,t,r,o){let a=0;const i=new s("theTestBoat",o);if(i.placeShip(e,t,r),n.forEach((n=>{n.forEach((n=>{i.locations.forEach((e=>{e.cell===n.cell&&null===n.boat&&a++}))}))})),a!==o)return"error"}(this.gameboard,e,t,r,this.ships[o].length))return"error";const a=this.ships[o];a.placeShip(e,t,r),this.gameboard=function(n,e){let t=n;return e.locations.forEach((n=>{t[n.y_axis][n.x_axis].boat="".concat(e.name)})),t}(this.gameboard,a)},receiveAttack(n,e){if(null===this.gameboard[n][e].boat)return this.gameboard[n][e].shotHere=!0,"miss";const t=d(this.gameboard[n][e].boat);return this.ships[t].hit(n,e),"".concat(this.gameboard[n][e].boat," was hit!")},allSunk(){let n=0;return this.ships.forEach((e=>{e.isSunk()&&n++})),5===n}}}function h(n,e){return{humanOrComp:e,name:n,isActivePlayer:!1,gameboard:new u(n),attack(n,e,t){n.gameboard.receiveAttack(e,t)},beginTurn(){this.isActivePlayer=!0},endTurn(){this.isActivePlayer=!1}}}const p=(n,e)=>[new h(n,"human"),new h(e,"computer")],C={players:[],turnCounter:0,playersTurn:0,newGame(){this.players=[],this.turnCounter=0,this.playersTurn=0,function(){i();const n=document.querySelector(".container"),e=document.createElement("form");e.method="post",e.action="",e.id="player1";const t=document.createElement("div");t.classList.add("playerName"),t.innerHTML='<label for="player" placeholder="player" required>Player 1 Name:</label><input type="text" name="player" id="player" />',e.appendChild(t);const r=document.createElement("button");r.type="submit",r.innerHTML="Submit",e.appendChild(r),n.appendChild(e),(()=>{const n=document.getElementById("player1");n.addEventListener("submit",(e=>{e.preventDefault();const t=new FormData(n).get("player");C.setPlayers(t),i(),o()}))})()}()},setPlayers(n){const e=p(n,"The Enemy");this.players=e},takeTurn(){}};var m=t(379),g=t.n(m),f=t(795),b=t.n(f),v=t(569),y=t.n(v),w=t(565),x=t.n(w),E=t(216),k=t.n(E),B=t(589),q=t.n(B),S=t(192),T={};T.styleTagTransform=q(),T.setAttributes=x(),T.insert=y().bind(null,"head"),T.domAPI=b(),T.insertStyleElement=k(),g()(S.Z,T),S.Z&&S.Z.locals&&S.Z.locals,C.newGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,