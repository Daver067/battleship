(()=>{"use strict";var t={192:(t,e,n)=>{n.d(e,{Z:()=>c});var r=n(537),o=n.n(r),a=n(645),s=n.n(a)()(o());s.push([t.id,"h1{color:red}","",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAAA,GACE,SAAA",sourcesContent:["h1 {\n  color: red;\n}\n"],sourceRoot:""}]);const c=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(r)for(var c=0;c<this.length;c++){var i=this[c][0];null!=i&&(s[i]=!0)}for(var u=0;u<t.length;u++){var l=[].concat(t[u]);r&&s[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),s=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(s).concat([a]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},s=[],c=0;c<t.length;c++){var i=t[c],u=r.base?i[0]+r.base:i[0],l=a[u]||0,p="".concat(u," ").concat(l);a[u]=l+1;var h=n(p),f={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==h)e[h].references++,e[h].updater(f);else{var d=o(f,r);r.byIndex=c,e.splice(c,0,{identifier:p,updater:d,references:1})}s.push(p)}return s}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var s=0;s<a.length;s++){var c=n(a[s]);e[c].references--}for(var i=r(t,o),u=0;u<a.length;u++){var l=n(a[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=i}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{function t(t,e){return{name:t,length:e,locations:[],numHits:0,placeShip(t,e,n){this.locations.push({x_axis:e,y_axis:t,hit:!1,cell:"".concat(t,"-").concat(e)});const r=function(){for(let n=1;n<this.length;n++){let r={x_axis:e+1*n,y_axis:t,hit:!1,cell:"".concat(t,"-").concat(e+1*n)};this.locations.push(r)}}.bind(this),o=function(){for(let n=1;n<this.length;n++){let r={x_axis:e,y_axis:t+1*n,hit:!1,cell:"".concat(t+1*n,"-").concat(e)};this.locations.push(r)}}.bind(this);return"x"===n?r():o(),this.locations},hit(t,e){this.locations.forEach((n=>{n.x_axis===e&&n.y_axis===t&&(n.hit=!0,this.numHits++)}))},isSunk(){return this.numHits===this.length}}}function e(){const t=[];for(let e=0;e<7;e++){const n=[];for(let t=0;t<7;t++){const r={boat:null,shotHere:!1,cell:"".concat(e,"-").concat(t)};n.push(r)}t.push(n)}return t}function r(t){let e;switch(t){case"carrier":e=0;break;case"battleship":e=1;break;case"cruiser":e=2;break;case"sub":e=3;break;case"patrolBoat":e=4;break;default:console.log("invalid boat name")}return e}function o(n){return{owner:n,gameboard:e(),ships:[new t("carrier",5),new t("battleship",4),new t("cruiser",3),new t("sub",3),new t("patrolBoat",2)],placeShip(e,n,o,a){const s=r(e);if("error"===function(e,n,r,o,a){let s=0;const c=new t("theTestBoat",a);if(c.placeShip(n,r,o),e.forEach((t=>{t.forEach((t=>{c.locations.forEach((e=>{e.cell===t.cell&&null===t.boat&&s++}))}))})),s!==a)return"error"}(this.gameboard,n,o,a,this.ships[s].length))return"error";const c=this.ships[s];c.placeShip(n,o,a),this.gameboard=function(t,e){let n=t;return e.locations.forEach((t=>{n[t.y_axis][t.x_axis].boat="".concat(e.name)})),n}(this.gameboard,c)},receiveAttack(t,e){if(null===this.gameboard[t][e].boat)return this.gameboard[t][e].shotHere=!0,"miss";const n=r(this.gameboard[t][e].boat);return this.ships[n].hit(t,e),"".concat(this.gameboard[t][e].boat," was hit!")},allSunk(){let t=0;return this.ships.forEach((e=>{e.isSunk()&&t++})),5===t}}}function a(t,e){return{humanOrComp:e,name:t,isActivePlayer:!1,gameboard:new o(t),attack(t,e,n){t.gameboard.receiveAttack(e,n)},beginTurn(){this.isActivePlayer=!0},endTurn(){this.isActivePlayer=!1}}}const s=(t,e)=>[new a(t,"human"),new a(e,"computer")],c={players:[],setPlayers(t){const e=s(t,"compy");this.players=e}};var i=n(379),u=n.n(i),l=n(795),p=n.n(l),h=n(569),f=n.n(h),d=n(565),m=n.n(d),v=n(216),b=n.n(v),y=n(589),g=n.n(y),x=n(192),w={};w.styleTagTransform=g(),w.setAttributes=m(),w.insert=f().bind(null,"head"),w.domAPI=p(),w.insertStyleElement=b(),u()(x.Z,w),x.Z&&x.Z.locals&&x.Z.locals,(()=>{const t=document.getElementById("player1");t.addEventListener("submit",(e=>{e.preventDefault();const n=new FormData(t).get("player");c.setPlayers(n)}))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,