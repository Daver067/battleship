(()=>{"use strict";var n={192:(n,e,t)=>{t.d(e,{Z:()=>c});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([n.id,".gridify{margin:auto;width:25vw;height:25vw;display:flex;flex-direction:column}.row{display:flex;width:100%;height:100%}.cell{width:100%;height:100%;border:1px solid #000}.cell:hover{background-color:bisque;cursor:pointer}.moduleBackground{position:absolute;top:0;left:0;width:100vw;height:100vh;background-color:#fff}.moduleBackground h1{color:#000;align-self:center;font-size:5rem;text-align:center;padding:.25em 0}.carrier{display:flex;height:2.5vw;width:12.5vw;background-color:gray;margin:auto}.carrier.flip{height:12.5vw;width:2.5vw;flex-direction:column}.battleship{display:flex;height:2.5vw;width:10vw;background-color:gray;margin:auto}.battleship.flip{height:10vw;width:2.5vw;flex-direction:column}.cruiser{display:flex;height:2.5vw;width:7.5vw;background-color:gray;margin:auto}.cruiser.flip{height:7.5vw;width:2.5vw;flex-direction:column}.sub{display:flex;height:2.5vw;width:7.5vw;background-color:gray;margin:auto}.sub.flip{height:7.5vw;width:2.5vw;flex-direction:column}.patrolBoat{display:flex;height:2.5vw;width:5vw;background-color:gray;margin:auto}.patrolBoat.flip{height:5vw;width:2.5vw;flex-direction:column}.shipAndFlip{display:flex;flex-direction:column}.shipAndFlip h2{color:#000;align-self:center;font-size:3rem;text-align:center;padding:.5em 0 0 0}#rotate{height:5vw;padding:0 2em;align-self:center;font-size:1.25rem;margin:0 0 1em 0;border-radius:18px}div .human[boat=carrier]{background-color:#000}div .human[boat=battleship]{background-color:#000}div .human[boat=cruiser]{background-color:#000}div .human[boat=sub]{background-color:#000}div .human[boat=patrolBoat]{background-color:#000}div .human[boat=null]{background-color:#fff}div .human[boat=null]:hover{background-color:#faebd7}*{box-sizing:border-box;margin:0;padding:0}h1{color:red}","",{version:3,sources:["webpack://./src/scss/_grid.scss","webpack://./src/scss/_variableAndFunctions.scss","webpack://./src/scss/_placeShips.scss","webpack://./src/style.scss"],names:[],mappings:"AAEA,SACE,WAAA,CACA,UAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CAEF,KACE,YAAA,CACA,UAAA,CACA,WAAA,CAGF,MACE,UAAA,CACA,WAAA,CACA,qBCXY,CDYZ,YACE,uBAAA,CACA,cAAA,CEnBJ,kBAEE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CACA,qBACE,UAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,eAAA,CAIJ,SACE,YAAA,CACA,YAAA,CACA,YAAA,CACA,qBAAA,CACA,WAAA,CACA,cACE,aAAA,CACA,WAAA,CACA,qBAAA,CAGJ,YACE,YAAA,CACA,YAAA,CACA,UAAA,CACA,qBAAA,CACA,WAAA,CACA,iBACE,WAAA,CACA,WAAA,CACA,qBAAA,CAGJ,SACE,YAAA,CACA,YAAA,CACA,WAAA,CACA,qBAAA,CACA,WAAA,CACA,cACE,YAAA,CACA,WAAA,CACA,qBAAA,CAGJ,KACE,YAAA,CACA,YAAA,CACA,WAAA,CACA,qBAAA,CACA,WAAA,CACA,UACE,YAAA,CACA,WAAA,CACA,qBAAA,CAGJ,YACE,YAAA,CACA,YAAA,CACA,SAAA,CACA,qBAAA,CACA,WAAA,CACA,iBACE,UAAA,CACA,WAAA,CACA,qBAAA,CAIJ,aACE,YAAA,CACA,qBAAA,CACA,gBACE,UAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,kBAAA,CAIJ,QACE,UAAA,CACA,aAAA,CACA,iBAAA,CACA,iBAAA,CACA,gBAAA,CACA,kBAAA,CAKE,yBACE,qBAAA,CAEF,4BACE,qBAAA,CAEF,yBACE,qBAAA,CAEF,qBACE,qBAAA,CAEF,4BACE,qBAAA,CAEF,sBACE,qBAAA,CACA,4BACE,wBAAA,CCtHR,EACE,qBAAA,CACA,QAAA,CACA,SAAA,CAGF,GACE,SAAA",sourcesContent:['@import "../scss/variableAndFunctions";\n\n.gridify {\n  margin: auto;\n  width: 25vw;\n  height: 25vw;\n  display: flex;\n  flex-direction: column;\n}\n.row {\n  display: flex;\n  width: 100%;\n  height: 100%;\n}\n\n.cell {\n  width: 100%;\n  height: 100%;\n  border: $test-border;\n  &:hover {\n    background-color: bisque;\n    cursor: pointer;\n  }\n}\n','@mixin flexCenter($direction) {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: $direction;\n}\n\n$test-border: 1px solid black;\n$boatColor: black;\n\n$font-weights: (\n  "light": 300,\n  "regular": 400,\n  "medium": 500,\n  "bold": 700,\n);\n\n@function weight($weight-name) {\n  @return map-get($map: $font-weights, $key: $weight-name);\n}\n','@import "../scss/variableAndFunctions";\n\n.moduleBackground {\n  // @include flexCenter(row);\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(255, 255, 255, 1);\n  h1 {\n    color: black;\n    align-self: center;\n    font-size: 5rem;\n    text-align: center;\n    padding: 0.25em 0;\n  }\n}\n\n.carrier {\n  display: flex;\n  height: 2.5vw;\n  width: 12.5vw;\n  background-color: grey;\n  margin: auto;\n  &.flip {\n    height: 12.5vw;\n    width: 2.5vw;\n    flex-direction: column;\n  }\n}\n.battleship {\n  display: flex;\n  height: 2.5vw;\n  width: 10vw;\n  background-color: grey;\n  margin: auto;\n  &.flip {\n    height: 10vw;\n    width: 2.5vw;\n    flex-direction: column;\n  }\n}\n.cruiser {\n  display: flex;\n  height: 2.5vw;\n  width: 7.5vw;\n  background-color: grey;\n  margin: auto;\n  &.flip {\n    height: 7.5vw;\n    width: 2.5vw;\n    flex-direction: column;\n  }\n}\n.sub {\n  display: flex;\n  height: 2.5vw;\n  width: 7.5vw;\n  background-color: grey;\n  margin: auto;\n  &.flip {\n    height: 7.5vw;\n    width: 2.5vw;\n    flex-direction: column;\n  }\n}\n.patrolBoat {\n  display: flex;\n  height: 2.5vw;\n  width: 5vw;\n  background-color: grey;\n  margin: auto;\n  &.flip {\n    height: 5vw;\n    width: 2.5vw;\n    flex-direction: column;\n  }\n}\n\n.shipAndFlip {\n  display: flex;\n  flex-direction: column;\n  h2 {\n    color: black;\n    align-self: center;\n    font-size: 3rem;\n    text-align: center;\n    padding: 0.5em 0 0 0;\n  }\n}\n\n#rotate {\n  height: 5vw;\n  padding: 0 2em;\n  align-self: center;\n  font-size: 1.25rem;\n  margin: 0 0 1em 0;\n  border-radius: 18px;\n}\n\ndiv {\n  & .human {\n    &[boat="carrier"] {\n      background-color: black;\n    }\n    &[boat="battleship"] {\n      background-color: black;\n    }\n    &[boat="cruiser"] {\n      background-color: black;\n    }\n    &[boat="sub"] {\n      background-color: black;\n    }\n    &[boat="patrolBoat"] {\n      background-color: black;\n    }\n    &[boat="null"] {\n      background-color: white;\n      &:hover {\n        background-color: antiquewhite;\n      }\n    }\n  }\n}\n','@import "./scss/grid.scss";\n@import "./scss/placeShips";\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nh1 {\n  color: red;\n}\n'],sourceRoot:""}]);const c=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var c=0;c<this.length;c++){var A=this[c][0];null!=A&&(a[A]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);o&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},a=[],c=0;c<n.length;c++){var A=n[c],s=o.base?A[0]+o.base:A[0],l=i[s]||0,d="".concat(s," ").concat(l);i[s]=l+1;var u=t(d),h={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==u)e[u].references++,e[u].updater(h);else{var p=r(h,o);o.byIndex=c,e.splice(c,0,{identifier:d,updater:p,references:1})}a.push(d)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=t(i[a]);e[c].references--}for(var A=o(n,r),s=0;s<i.length;s++){var l=t(i[s]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=A}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return n[o](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{function n(n,e){return{name:n,length:e,locations:[],numHits:0,placeShip(n,e,t){n=Number(n),e=Number(e),this.locations.push({x_axis:e,y_axis:n,hit:!1,cell:"".concat(n,"-").concat(e)});const o=function(){for(let t=1;t<this.length;t++){let o={x_axis:e+1*t,y_axis:n,hit:!1,cell:"".concat(n,"-").concat(e+1*t)};this.locations.push(o)}}.bind(this),r=function(){for(let t=1;t<this.length;t++){let o={x_axis:e,y_axis:n+1*t,hit:!1,cell:"".concat(n+1*t,"-").concat(e)};this.locations.push(o)}}.bind(this);return"x"===t?o():r(),this.locations},hit(n,e){this.locations.forEach((t=>{t.x_axis===e&&t.y_axis===n&&(t.hit=!0,this.numHits++)}))},isSunk(){return this.numHits===this.length}}}function e(){const n=[];for(let e=0;e<7;e++){const t=[];for(let n=0;n<7;n++){const o={boat:null,shotHere:!1,cell:"".concat(e,"-").concat(n)};t.push(o)}n.push(t)}return n}function o(n){let e;switch(n){case"carrier":e=0;break;case"battleship":e=1;break;case"cruiser":e=2;break;case"sub":e=3;break;case"patrolBoat":e=4;break;default:console.log("invalid boat name")}return e}function r(t){return{owner:t,gameboard:e(),ships:[new n("carrier",5),new n("battleship",4),new n("cruiser",3),new n("sub",3),new n("patrolBoat",2)],placeShip(e,t,r,i){const a=o(e);if("error"===function(e,t,o,r,i){let a=0;const c=new n("theTestBoat",i);if(c.placeShip(t,o,r),e.forEach((n=>{n.forEach((n=>{c.locations.forEach((e=>{e.cell===n.cell&&null===n.boat&&a++}))}))})),a!==i)return"error"}(this.gameboard,t,r,i,this.ships[a].length))return"error";const c=this.ships[a];c.placeShip(t,r,i),this.gameboard=function(n,e){let t=n;return e.locations.forEach((n=>{t[n.y_axis][n.x_axis].boat="".concat(e.name)})),t}(this.gameboard,c)},receiveAttack(n,e){if(null===this.gameboard[n][e].boat)return this.gameboard[n][e].shotHere=!0,"miss";const t=o(this.gameboard[n][e].boat);return this.ships[t].hit(n,e),"".concat(this.gameboard[n][e].boat," was hit!")},allSunk(){let n=0;return this.ships.forEach((e=>{e.isSunk()&&n++})),5===n}}}function i(n,e){return{humanOrComp:e,name:n,isActivePlayer:!1,gameboard:new r(n),attack(n,e,t){n.gameboard.receiveAttack(e,t)},beginTurn(){this.isActivePlayer=!0},endTurn(){this.isActivePlayer=!1}}}const a=(n,e)=>[new i(n,"human"),new i(e,"computer")],c={players:[],setPlayers(n){const e=a(n,"compy");this.players=e}};function A(n){const e=document.querySelector("body"),t=l("div","moduleBackground","   <h1>Place Your Ships!</h1><div id=\"playerBoard\"></div><div id='shipType'><h2 id='placeYourThisShip'></div></div>");e.appendChild(t),s(function(n){const e=l("div","human"," "),t=l("div","gridify"," ");return e.appendChild(t),n.gameboard.gameboard.forEach((n=>{const e=l("div","row"," ");n.forEach((n=>{const t=l("div","human"," ");t.classList.add("cell");for(const e in n)t.setAttribute("".concat(e),"".concat(n[e]));e.appendChild(t)})),t.appendChild(e)})),e}(c.players[0]),"#playerBoard"),s(l("div","shipAndFlip","<h2>Click on a square to place your ".concat(n.name,'</h2><button id="rotate">Rotate Ship</button>')),"#shipType");let o='<div class="cell"></div>';for(let e=1;e<n.length;e++)o+='<div class="cell"></div>';var r;s(l("div","".concat(n.name),"".concat(o)),"#shipType"),r=n,document.querySelector(".gridify").addEventListener("mousedown",(n=>{const e=n.target.attributes[3].value[0],t=n.target.attributes[3].value[2];let o;o=document.querySelector(".".concat(r.name)).classList.contains("flip")?"y":"x","error"===c.players[0].gameboard.placeShip(r.name,e,t,o)?console.log("you can't place a ship there!"):d()})),function(n){document.querySelector("button").addEventListener("click",(()=>{!function(n){document.querySelector(".".concat(n)).classList.toggle("flip")}(n)}))}(n.name)}function s(n,e){document.querySelector(e).appendChild(n)}function l(n,e,t){const o=document.createElement(n);return o.classList.add(e),o.innerHTML=t,o}function d(){0===c.players[0].gameboard.ships[0].locations.length?A(c.players[0].gameboard.ships[0]):0===c.players[0].gameboard.ships[1].locations.length?(u(),A(c.players[0].gameboard.ships[1])):0===c.players[0].gameboard.ships[2].locations.length?(u(),A(c.players[0].gameboard.ships[2])):0===c.players[0].gameboard.ships[3].locations.length?(u(),A(c.players[0].gameboard.ships[3])):0===c.players[0].gameboard.ships[4].locations.length?(u(),A(c.players[0].gameboard.ships[4])):(u(),console.log("start game!"))}function u(){const n=document.querySelector("body"),e=document.querySelector(".moduleBackground");n.removeChild(e)}var h=t(379),p=t.n(h),C=t(795),g=t.n(C),f=t(569),m=t.n(f),b=t(565),v=t.n(b),w=t(216),y=t.n(w),x=t(589),k=t.n(x),B=t(192),E={};E.styleTagTransform=k(),E.setAttributes=v(),E.insert=m().bind(null,"head"),E.domAPI=g(),E.insertStyleElement=y(),p()(B.Z,E),B.Z&&B.Z.locals&&B.Z.locals,(()=>{const n=document.getElementById("player1");n.addEventListener("submit",(e=>{e.preventDefault();const t=new FormData(n).get("player");c.setPlayers(t),function(){const n=document.querySelector(".container");for(;n.firstChild;)n.removeChild(n.firstElementChild)}(),d()}))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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S3hHLFlBQVk3RixFQUNsQixDLHlIQ2pDRzBDLEVBQVUsQ0FBQyxFQUVmQSxFQUFRZ0Qsa0JBQW9CLElBQzVCaEQsRUFBUTBDLGNBQWdCLElBRWxCMUMsRUFBUTBCLE9BQVMsU0FBYyxLQUFNLFFBRTNDMUIsRUFBUWUsT0FBUyxJQUNqQmYsRUFBUStDLG1CQUFxQixJQUVoQixJQUFJLElBQVMvQyxHQUtKLEtBQVcsWUFBaUIsV0RyQjVCLE1BQ2xCLE1BQU15TCxFQUFhM0osU0FBUzRKLGVBQWUsV0FDM0NELEVBQVdoQixpQkFBaUIsVUFBV3JJLElBQ3JDQSxFQUFFdUosaUJBQ0YsTUFDTUMsRUFEYSxJQUFJQyxTQUFTSixHQUNMaEgsSUFBSSxVQUMvQjRFLEVBQVNFLFdBQVdxQyxHQW1DMUIsV0FDRSxNQUFNRSxFQUFZaEssU0FBU0MsY0FBYyxjQUN6QyxLQUFPK0osRUFBVXZJLFlBQ2Z1SSxFQUFVM0ksWUFBWTJJLEVBQVVDLGtCQUVuQyxDQXZDS0MsR0FFQWxCLEdBQWUsR0FQakIsRUVKSm1CLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlLnNjc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3NjcmlwdHMvc2hpcC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3NjcmlwdHMvZ2FtZWJvYXJkLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc2NyaXB0cy9wbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zY3JpcHRzL2dhbWVMb29wLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc2NyaXB0cy9wbGFjZVNoaXBzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc2NyaXB0cy9kb21TdHVmZi5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlLnNjc3M/NzViYSIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmdyaWRpZnl7bWFyZ2luOmF1dG87d2lkdGg6MjV2dztoZWlnaHQ6MjV2dztkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5yb3d7ZGlzcGxheTpmbGV4O3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9LmNlbGx7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtib3JkZXI6MXB4IHNvbGlkICMwMDB9LmNlbGw6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjpiaXNxdWU7Y3Vyc29yOnBvaW50ZXJ9Lm1vZHVsZUJhY2tncm91bmR7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3dpZHRoOjEwMHZ3O2hlaWdodDoxMDB2aDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9Lm1vZHVsZUJhY2tncm91bmQgaDF7Y29sb3I6IzAwMDthbGlnbi1zZWxmOmNlbnRlcjtmb250LXNpemU6NXJlbTt0ZXh0LWFsaWduOmNlbnRlcjtwYWRkaW5nOi4yNWVtIDB9LmNhcnJpZXJ7ZGlzcGxheTpmbGV4O2hlaWdodDoyLjV2dzt3aWR0aDoxMi41dnc7YmFja2dyb3VuZC1jb2xvcjpncmF5O21hcmdpbjphdXRvfS5jYXJyaWVyLmZsaXB7aGVpZ2h0OjEyLjV2dzt3aWR0aDoyLjV2dztmbGV4LWRpcmVjdGlvbjpjb2x1bW59LmJhdHRsZXNoaXB7ZGlzcGxheTpmbGV4O2hlaWdodDoyLjV2dzt3aWR0aDoxMHZ3O2JhY2tncm91bmQtY29sb3I6Z3JheTttYXJnaW46YXV0b30uYmF0dGxlc2hpcC5mbGlwe2hlaWdodDoxMHZ3O3dpZHRoOjIuNXZ3O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uY3J1aXNlcntkaXNwbGF5OmZsZXg7aGVpZ2h0OjIuNXZ3O3dpZHRoOjcuNXZ3O2JhY2tncm91bmQtY29sb3I6Z3JheTttYXJnaW46YXV0b30uY3J1aXNlci5mbGlwe2hlaWdodDo3LjV2dzt3aWR0aDoyLjV2dztmbGV4LWRpcmVjdGlvbjpjb2x1bW59LnN1YntkaXNwbGF5OmZsZXg7aGVpZ2h0OjIuNXZ3O3dpZHRoOjcuNXZ3O2JhY2tncm91bmQtY29sb3I6Z3JheTttYXJnaW46YXV0b30uc3ViLmZsaXB7aGVpZ2h0OjcuNXZ3O3dpZHRoOjIuNXZ3O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0ucGF0cm9sQm9hdHtkaXNwbGF5OmZsZXg7aGVpZ2h0OjIuNXZ3O3dpZHRoOjV2dztiYWNrZ3JvdW5kLWNvbG9yOmdyYXk7bWFyZ2luOmF1dG99LnBhdHJvbEJvYXQuZmxpcHtoZWlnaHQ6NXZ3O3dpZHRoOjIuNXZ3O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uc2hpcEFuZEZsaXB7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uc2hpcEFuZEZsaXAgaDJ7Y29sb3I6IzAwMDthbGlnbi1zZWxmOmNlbnRlcjtmb250LXNpemU6M3JlbTt0ZXh0LWFsaWduOmNlbnRlcjtwYWRkaW5nOi41ZW0gMCAwIDB9I3JvdGF0ZXtoZWlnaHQ6NXZ3O3BhZGRpbmc6MCAyZW07YWxpZ24tc2VsZjpjZW50ZXI7Zm9udC1zaXplOjEuMjVyZW07bWFyZ2luOjAgMCAxZW0gMDtib3JkZXItcmFkaXVzOjE4cHh9ZGl2IC5odW1hbltib2F0PWNhcnJpZXJde2JhY2tncm91bmQtY29sb3I6IzAwMH1kaXYgLmh1bWFuW2JvYXQ9YmF0dGxlc2hpcF17YmFja2dyb3VuZC1jb2xvcjojMDAwfWRpdiAuaHVtYW5bYm9hdD1jcnVpc2VyXXtiYWNrZ3JvdW5kLWNvbG9yOiMwMDB9ZGl2IC5odW1hbltib2F0PXN1Yl17YmFja2dyb3VuZC1jb2xvcjojMDAwfWRpdiAuaHVtYW5bYm9hdD1wYXRyb2xCb2F0XXtiYWNrZ3JvdW5kLWNvbG9yOiMwMDB9ZGl2IC5odW1hbltib2F0PW51bGxde2JhY2tncm91bmQtY29sb3I6I2ZmZn1kaXYgLmh1bWFuW2JvYXQ9bnVsbF06aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZmFlYmQ3fSp7Ym94LXNpemluZzpib3JkZXItYm94O21hcmdpbjowO3BhZGRpbmc6MH1oMXtjb2xvcjpyZWR9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3Njc3MvX2dyaWQuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3Njc3MvX3ZhcmlhYmxlQW5kRnVuY3Rpb25zLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zY3NzL19wbGFjZVNoaXBzLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUVBLFNBQ0UsV0FBQSxDQUNBLFVBQUEsQ0FDQSxXQUFBLENBQ0EsWUFBQSxDQUNBLHFCQUFBLENBRUYsS0FDRSxZQUFBLENBQ0EsVUFBQSxDQUNBLFdBQUEsQ0FHRixNQUNFLFVBQUEsQ0FDQSxXQUFBLENBQ0EscUJDWFksQ0RZWixZQUNFLHVCQUFBLENBQ0EsY0FBQSxDRW5CSixrQkFFRSxpQkFBQSxDQUNBLEtBQUEsQ0FDQSxNQUFBLENBQ0EsV0FBQSxDQUNBLFlBQUEsQ0FDQSxxQkFBQSxDQUNBLHFCQUNFLFVBQUEsQ0FDQSxpQkFBQSxDQUNBLGNBQUEsQ0FDQSxpQkFBQSxDQUNBLGVBQUEsQ0FJSixTQUNFLFlBQUEsQ0FDQSxZQUFBLENBQ0EsWUFBQSxDQUNBLHFCQUFBLENBQ0EsV0FBQSxDQUNBLGNBQ0UsYUFBQSxDQUNBLFdBQUEsQ0FDQSxxQkFBQSxDQUdKLFlBQ0UsWUFBQSxDQUNBLFlBQUEsQ0FDQSxVQUFBLENBQ0EscUJBQUEsQ0FDQSxXQUFBLENBQ0EsaUJBQ0UsV0FBQSxDQUNBLFdBQUEsQ0FDQSxxQkFBQSxDQUdKLFNBQ0UsWUFBQSxDQUNBLFlBQUEsQ0FDQSxXQUFBLENBQ0EscUJBQUEsQ0FDQSxXQUFBLENBQ0EsY0FDRSxZQUFBLENBQ0EsV0FBQSxDQUNBLHFCQUFBLENBR0osS0FDRSxZQUFBLENBQ0EsWUFBQSxDQUNBLFdBQUEsQ0FDQSxxQkFBQSxDQUNBLFdBQUEsQ0FDQSxVQUNFLFlBQUEsQ0FDQSxXQUFBLENBQ0EscUJBQUEsQ0FHSixZQUNFLFlBQUEsQ0FDQSxZQUFBLENBQ0EsU0FBQSxDQUNBLHFCQUFBLENBQ0EsV0FBQSxDQUNBLGlCQUNFLFVBQUEsQ0FDQSxXQUFBLENBQ0EscUJBQUEsQ0FJSixhQUNFLFlBQUEsQ0FDQSxxQkFBQSxDQUNBLGdCQUNFLFVBQUEsQ0FDQSxpQkFBQSxDQUNBLGNBQUEsQ0FDQSxpQkFBQSxDQUNBLGtCQUFBLENBSUosUUFDRSxVQUFBLENBQ0EsYUFBQSxDQUNBLGlCQUFBLENBQ0EsaUJBQUEsQ0FDQSxnQkFBQSxDQUNBLGtCQUFBLENBS0UseUJBQ0UscUJBQUEsQ0FFRiw0QkFDRSxxQkFBQSxDQUVGLHlCQUNFLHFCQUFBLENBRUYscUJBQ0UscUJBQUEsQ0FFRiw0QkFDRSxxQkFBQSxDQUVGLHNCQUNFLHFCQUFBLENBQ0EsNEJBQ0Usd0JBQUEsQ0N0SFIsRUFDRSxxQkFBQSxDQUNBLFFBQUEsQ0FDQSxTQUFBLENBR0YsR0FDRSxTQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uL3Njc3MvdmFyaWFibGVBbmRGdW5jdGlvbnNcXFwiO1xcblxcbi5ncmlkaWZ5IHtcXG4gIG1hcmdpbjogYXV0bztcXG4gIHdpZHRoOiAyNXZ3O1xcbiAgaGVpZ2h0OiAyNXZ3O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcbi5yb3cge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG4uY2VsbCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJvcmRlcjogJHRlc3QtYm9yZGVyO1xcbiAgJjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGJpc3F1ZTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgfVxcbn1cXG5cIixcIkBtaXhpbiBmbGV4Q2VudGVyKCRkaXJlY3Rpb24pIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBmbGV4LWRpcmVjdGlvbjogJGRpcmVjdGlvbjtcXG59XFxuXFxuJHRlc3QtYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuJGJvYXRDb2xvcjogYmxhY2s7XFxuXFxuJGZvbnQtd2VpZ2h0czogKFxcbiAgXFxcImxpZ2h0XFxcIjogMzAwLFxcbiAgXFxcInJlZ3VsYXJcXFwiOiA0MDAsXFxuICBcXFwibWVkaXVtXFxcIjogNTAwLFxcbiAgXFxcImJvbGRcXFwiOiA3MDAsXFxuKTtcXG5cXG5AZnVuY3Rpb24gd2VpZ2h0KCR3ZWlnaHQtbmFtZSkge1xcbiAgQHJldHVybiBtYXAtZ2V0KCRtYXA6ICRmb250LXdlaWdodHMsICRrZXk6ICR3ZWlnaHQtbmFtZSk7XFxufVxcblwiLFwiQGltcG9ydCBcXFwiLi4vc2Nzcy92YXJpYWJsZUFuZEZ1bmN0aW9uc1xcXCI7XFxuXFxuLm1vZHVsZUJhY2tncm91bmQge1xcbiAgLy8gQGluY2x1ZGUgZmxleENlbnRlcihyb3cpO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHdpZHRoOiAxMDB2dztcXG4gIGhlaWdodDogMTAwdmg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDEpO1xcbiAgaDEge1xcbiAgICBjb2xvcjogYmxhY2s7XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcXG4gICAgZm9udC1zaXplOiA1cmVtO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIHBhZGRpbmc6IDAuMjVlbSAwO1xcbiAgfVxcbn1cXG5cXG4uY2FycmllciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgaGVpZ2h0OiAyLjV2dztcXG4gIHdpZHRoOiAxMi41dnc7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBncmV5O1xcbiAgbWFyZ2luOiBhdXRvO1xcbiAgJi5mbGlwIHtcXG4gICAgaGVpZ2h0OiAxMi41dnc7XFxuICAgIHdpZHRoOiAyLjV2dztcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIH1cXG59XFxuLmJhdHRsZXNoaXAge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogMi41dnc7XFxuICB3aWR0aDogMTB2dztcXG4gIGJhY2tncm91bmQtY29sb3I6IGdyZXk7XFxuICBtYXJnaW46IGF1dG87XFxuICAmLmZsaXAge1xcbiAgICBoZWlnaHQ6IDEwdnc7XFxuICAgIHdpZHRoOiAyLjV2dztcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIH1cXG59XFxuLmNydWlzZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogMi41dnc7XFxuICB3aWR0aDogNy41dnc7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBncmV5O1xcbiAgbWFyZ2luOiBhdXRvO1xcbiAgJi5mbGlwIHtcXG4gICAgaGVpZ2h0OiA3LjV2dztcXG4gICAgd2lkdGg6IDIuNXZ3O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgfVxcbn1cXG4uc3ViIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBoZWlnaHQ6IDIuNXZ3O1xcbiAgd2lkdGg6IDcuNXZ3O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogZ3JleTtcXG4gIG1hcmdpbjogYXV0bztcXG4gICYuZmxpcCB7XFxuICAgIGhlaWdodDogNy41dnc7XFxuICAgIHdpZHRoOiAyLjV2dztcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIH1cXG59XFxuLnBhdHJvbEJvYXQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogMi41dnc7XFxuICB3aWR0aDogNXZ3O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogZ3JleTtcXG4gIG1hcmdpbjogYXV0bztcXG4gICYuZmxpcCB7XFxuICAgIGhlaWdodDogNXZ3O1xcbiAgICB3aWR0aDogMi41dnc7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICB9XFxufVxcblxcbi5zaGlwQW5kRmxpcCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGgyIHtcXG4gICAgY29sb3I6IGJsYWNrO1xcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogM3JlbTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBwYWRkaW5nOiAwLjVlbSAwIDAgMDtcXG4gIH1cXG59XFxuXFxuI3JvdGF0ZSB7XFxuICBoZWlnaHQ6IDV2dztcXG4gIHBhZGRpbmc6IDAgMmVtO1xcbiAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgZm9udC1zaXplOiAxLjI1cmVtO1xcbiAgbWFyZ2luOiAwIDAgMWVtIDA7XFxuICBib3JkZXItcmFkaXVzOiAxOHB4O1xcbn1cXG5cXG5kaXYge1xcbiAgJiAuaHVtYW4ge1xcbiAgICAmW2JvYXQ9XFxcImNhcnJpZXJcXFwiXSB7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICAgIH1cXG4gICAgJltib2F0PVxcXCJiYXR0bGVzaGlwXFxcIl0ge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xcbiAgICB9XFxuICAgICZbYm9hdD1cXFwiY3J1aXNlclxcXCJdIHtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG4gICAgfVxcbiAgICAmW2JvYXQ9XFxcInN1YlxcXCJdIHtcXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG4gICAgfVxcbiAgICAmW2JvYXQ9XFxcInBhdHJvbEJvYXRcXFwiXSB7XFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICAgIH1cXG4gICAgJltib2F0PVxcXCJudWxsXFxcIl0ge1xcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICAgICY6aG92ZXIge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYW50aXF1ZXdoaXRlO1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcbn1cXG5cIixcIkBpbXBvcnQgXFxcIi4vc2Nzcy9ncmlkLnNjc3NcXFwiO1xcbkBpbXBvcnQgXFxcIi4vc2Nzcy9wbGFjZVNoaXBzXFxcIjtcXG5cXG4qIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5oMSB7XFxuICBjb2xvcjogcmVkO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsImZ1bmN0aW9uIFNoaXAobmFtZSwgbGVuZ3RoKSB7XG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICBsZW5ndGgsXG4gICAgbG9jYXRpb25zOiBbXSxcbiAgICBudW1IaXRzOiAwLFxuXG4gICAgcGxhY2VTaGlwKHN0YXJ0aW5nQ2VsbHksIHN0YXJ0aW5nQ2VsbHgsIGF4aXMpIHtcbiAgICAgIHN0YXJ0aW5nQ2VsbHkgPSBOdW1iZXIoc3RhcnRpbmdDZWxseSk7XG4gICAgICBzdGFydGluZ0NlbGx4ID0gTnVtYmVyKHN0YXJ0aW5nQ2VsbHgpO1xuICAgICAgdGhpcy5sb2NhdGlvbnMucHVzaCh7XG4gICAgICAgIHhfYXhpczogc3RhcnRpbmdDZWxseCxcbiAgICAgICAgeV9heGlzOiBzdGFydGluZ0NlbGx5LFxuICAgICAgICBoaXQ6IGZhbHNlLFxuICAgICAgICBjZWxsOiBgJHtzdGFydGluZ0NlbGx5fS0ke3N0YXJ0aW5nQ2VsbHh9YCxcbiAgICAgIH0pO1xuICAgICAgZnVuY3Rpb24gaW5jcmVhc2VYQXhpcygpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbGV0IG5ld0xvY2F0aW9uID0ge1xuICAgICAgICAgICAgeF9heGlzOiBzdGFydGluZ0NlbGx4ICsgMSAqIGksXG4gICAgICAgICAgICB5X2F4aXM6IHN0YXJ0aW5nQ2VsbHksXG4gICAgICAgICAgICBoaXQ6IGZhbHNlLFxuICAgICAgICAgICAgY2VsbDogYCR7c3RhcnRpbmdDZWxseX0tJHtzdGFydGluZ0NlbGx4ICsgMSAqIGl9YCxcbiAgICAgICAgICB9O1xuICAgICAgICAgIHRoaXMubG9jYXRpb25zLnB1c2gobmV3TG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBpbmNyZWFzZVlBeGlzKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsZXQgbmV3TG9jYXRpb24gPSB7XG4gICAgICAgICAgICB4X2F4aXM6IHN0YXJ0aW5nQ2VsbHgsXG4gICAgICAgICAgICB5X2F4aXM6IHN0YXJ0aW5nQ2VsbHkgKyAxICogaSxcbiAgICAgICAgICAgIGhpdDogZmFsc2UsXG4gICAgICAgICAgICBjZWxsOiBgJHtzdGFydGluZ0NlbGx5ICsgMSAqIGl9LSR7c3RhcnRpbmdDZWxseH1gLFxuICAgICAgICAgIH07XG4gICAgICAgICAgdGhpcy5sb2NhdGlvbnMucHVzaChuZXdMb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGJvdW5kaW5jcmVhc2VYQXhpcyA9IGluY3JlYXNlWEF4aXMuYmluZCh0aGlzKTtcbiAgICAgIGNvbnN0IGJvdW5kaW5jcmVhc2VZQXhpcyA9IGluY3JlYXNlWUF4aXMuYmluZCh0aGlzKTtcbiAgICAgIGF4aXMgPT09IFwieFwiID8gYm91bmRpbmNyZWFzZVhBeGlzKCkgOiBib3VuZGluY3JlYXNlWUF4aXMoKTtcblxuICAgICAgcmV0dXJuIHRoaXMubG9jYXRpb25zO1xuICAgIH0sXG5cbiAgICBoaXQoY2VsbEhpdFksIGNlbGxIaXRYKSB7XG4gICAgICB0aGlzLmxvY2F0aW9ucy5mb3JFYWNoKChsb2NhdGlvbikgPT4ge1xuICAgICAgICBpZiAobG9jYXRpb24ueF9heGlzID09PSBjZWxsSGl0WCAmJiBsb2NhdGlvbi55X2F4aXMgPT09IGNlbGxIaXRZKSB7XG4gICAgICAgICAgbG9jYXRpb24uaGl0ID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLm51bUhpdHMrKztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGlzU3VuaygpIHtcbiAgICAgIHJldHVybiB0aGlzLm51bUhpdHMgPT09IHRoaXMubGVuZ3RoO1xuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCB7IFNoaXAgfTtcbiIsImltcG9ydCB7IFNoaXAgfSBmcm9tIFwiLi9zaGlwXCI7XG5cbi8vIGJ1aWxkcyB0aGUgZ2FtZWJvYXJkIGluc2lkZSB0aGUgZ2FtZWJvYXJkIGZ1bmN0aW9uXG5mdW5jdGlvbiBidWlsZEdhbWVib2FyZCgpIHtcbiAgY29uc3QgZ2FtZWJvYXJkID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgY29uc3QgYm9hcmRSb3cgPSBbXTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDc7IGorKykge1xuICAgICAgY29uc3QgdGhpc0JvYXJkQ2VsbCA9IHsgYm9hdDogbnVsbCwgc2hvdEhlcmU6IGZhbHNlLCBjZWxsOiBgJHtpfS0ke2p9YCB9O1xuICAgICAgYm9hcmRSb3cucHVzaCh0aGlzQm9hcmRDZWxsKTtcbiAgICB9XG4gICAgZ2FtZWJvYXJkLnB1c2goYm9hcmRSb3cpO1xuICB9XG4gIHJldHVybiBnYW1lYm9hcmQ7XG59XG5cbi8vIGNoZWNrcyB0aGUgaW5wdXQgZm9yIHNoaXAgdHlwZSBhbmQgY2hhbmdlcyBpdCB0byB0aGUgcHJvcGVyIGluZGV4IG51bWJlclxuZnVuY3Rpb24gZ2V0U2hpcEluZGV4KHNoaXBOYW1lKSB7XG4gIGxldCBzaGlwSW5kZXg7XG4gIHN3aXRjaCAoc2hpcE5hbWUpIHtcbiAgICBjYXNlIFwiY2FycmllclwiOlxuICAgICAgc2hpcEluZGV4ID0gMDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJiYXR0bGVzaGlwXCI6XG4gICAgICBzaGlwSW5kZXggPSAxO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNydWlzZXJcIjpcbiAgICAgIHNoaXBJbmRleCA9IDI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic3ViXCI6XG4gICAgICBzaGlwSW5kZXggPSAzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInBhdHJvbEJvYXRcIjpcbiAgICAgIHNoaXBJbmRleCA9IDQ7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgY29uc29sZS5sb2coXCJpbnZhbGlkIGJvYXQgbmFtZVwiKTtcbiAgfVxuICByZXR1cm4gc2hpcEluZGV4O1xufVxuXG4vLyBkdXJpbmcgcGxhY2Ugc2hpcCBpbiBnYW1lYm9hcmQgdGhpcyBmdW5jdGlvbiB1cGRhdGVzIHRoZSBnYW1lYm9hcmQgd2l0aCB0aGUgc2hpcCBsb2NhdGlvblxuZnVuY3Rpb24gdXBkYXRlR2FtZWJvYXJkV2l0aE5ld1NoaXBMb2NhdGlvbih0aGlzR2FtZWJvYXJkLCBzaGlwKSB7XG4gIGxldCByZXR1cm5HYW1lYm9hcmQgPSB0aGlzR2FtZWJvYXJkO1xuICBzaGlwLmxvY2F0aW9ucy5mb3JFYWNoKChsb2NhdGlvbikgPT4ge1xuICAgIHJldHVybkdhbWVib2FyZFtsb2NhdGlvbi55X2F4aXNdW2xvY2F0aW9uLnhfYXhpc10uYm9hdCA9IGAke3NoaXAubmFtZX1gO1xuICB9KTtcbiAgcmV0dXJuIHJldHVybkdhbWVib2FyZDtcbn1cblxuLy8gdGhpcyBmdW5jdGlvbiBydW5zIHRocm91Z2ggYWxsIGNlbGxzIGluIGdhbWVib2FyZCBhbmQgZW5zdXJlcyB0aGUgbG9jYXRpb24gdGhlIHNoaXAgaXMgaW4gaXMgYSB2YWxpZCBsb2NhdGlvblxuZnVuY3Rpb24gY2hlY2tWYWxpZFNoaXBMb2NhdGlvbihcbiAgY3VycmVudEdhbWVib2FyZCxcbiAgbmV3U2hpcFN0YXJ0aW5neSxcbiAgbmV3U2hpcFN0YXJ0aW5neCxcbiAgYXhpcyxcbiAgbmV3U2hpcFNpemVcbikge1xuICBsZXQgdmFsaWRMb2NhdGlvbiA9IDA7XG4gIGNvbnN0IG5ld1NoaXAgPSBuZXcgU2hpcChcInRoZVRlc3RCb2F0XCIsIG5ld1NoaXBTaXplKTtcbiAgbmV3U2hpcC5wbGFjZVNoaXAobmV3U2hpcFN0YXJ0aW5neSwgbmV3U2hpcFN0YXJ0aW5neCwgYXhpcyk7XG4gIGN1cnJlbnRHYW1lYm9hcmQuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgcm93LmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgIG5ld1NoaXAubG9jYXRpb25zLmZvckVhY2goKHNoaXBMb2NhdGlvbikgPT4ge1xuICAgICAgICBpZiAoc2hpcExvY2F0aW9uLmNlbGwgPT09IGNlbGwuY2VsbCAmJiBjZWxsLmJvYXQgPT09IG51bGwpIHtcbiAgICAgICAgICB2YWxpZExvY2F0aW9uKys7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbiAgaWYgKHZhbGlkTG9jYXRpb24gIT09IG5ld1NoaXBTaXplKSB7XG4gICAgcmV0dXJuIFwiZXJyb3JcIjtcbiAgfVxufVxuXG5mdW5jdGlvbiBHYW1lYm9hcmQob3duZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBvd25lcixcbiAgICBnYW1lYm9hcmQ6IGJ1aWxkR2FtZWJvYXJkKCksXG4gICAgc2hpcHM6IFtcbiAgICAgIG5ldyBTaGlwKFwiY2FycmllclwiLCA1KSxcbiAgICAgIG5ldyBTaGlwKFwiYmF0dGxlc2hpcFwiLCA0KSxcbiAgICAgIG5ldyBTaGlwKFwiY3J1aXNlclwiLCAzKSxcbiAgICAgIG5ldyBTaGlwKFwic3ViXCIsIDMpLFxuICAgICAgbmV3IFNoaXAoXCJwYXRyb2xCb2F0XCIsIDIpLFxuICAgIF0sXG4gICAgcGxhY2VTaGlwKHNoaXBOYW1lLCBzdGFydGluZ3ksIHN0YXJ0aW5neCwgYXhpcykge1xuICAgICAgY29uc3Qgc2hpcEluZGV4ID0gZ2V0U2hpcEluZGV4KHNoaXBOYW1lKTtcbiAgICAgIGlmIChcbiAgICAgICAgY2hlY2tWYWxpZFNoaXBMb2NhdGlvbihcbiAgICAgICAgICB0aGlzLmdhbWVib2FyZCxcbiAgICAgICAgICBzdGFydGluZ3ksXG4gICAgICAgICAgc3RhcnRpbmd4LFxuICAgICAgICAgIGF4aXMsXG4gICAgICAgICAgdGhpcy5zaGlwc1tzaGlwSW5kZXhdLmxlbmd0aFxuICAgICAgICApID09PSBcImVycm9yXCJcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gXCJlcnJvclwiO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzaGlwID0gdGhpcy5zaGlwc1tzaGlwSW5kZXhdO1xuICAgICAgc2hpcC5wbGFjZVNoaXAoc3RhcnRpbmd5LCBzdGFydGluZ3gsIGF4aXMpO1xuICAgICAgdGhpcy5nYW1lYm9hcmQgPSB1cGRhdGVHYW1lYm9hcmRXaXRoTmV3U2hpcExvY2F0aW9uKHRoaXMuZ2FtZWJvYXJkLCBzaGlwKTtcbiAgICB9LFxuICAgIHJlY2VpdmVBdHRhY2soeUF4aXMsIHhBeGlzKSB7XG4gICAgICBpZiAodGhpcy5nYW1lYm9hcmRbeUF4aXNdW3hBeGlzXS5ib2F0ID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuZ2FtZWJvYXJkW3lBeGlzXVt4QXhpc10uc2hvdEhlcmUgPSB0cnVlO1xuICAgICAgICByZXR1cm4gXCJtaXNzXCI7XG4gICAgICB9XG4gICAgICBjb25zdCBib2F0SW5kZXggPSBnZXRTaGlwSW5kZXgodGhpcy5nYW1lYm9hcmRbeUF4aXNdW3hBeGlzXS5ib2F0KTtcbiAgICAgIHRoaXMuc2hpcHNbYm9hdEluZGV4XS5oaXQoeUF4aXMsIHhBeGlzKTtcbiAgICAgIHJldHVybiBgJHt0aGlzLmdhbWVib2FyZFt5QXhpc11beEF4aXNdLmJvYXR9IHdhcyBoaXQhYDtcbiAgICB9LFxuICAgIGFsbFN1bmsoKSB7XG4gICAgICBsZXQgbnVtYmVyU3VuayA9IDA7XG4gICAgICB0aGlzLnNoaXBzLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgaWYgKHNoaXAuaXNTdW5rKCkpIHtcbiAgICAgICAgICBudW1iZXJTdW5rKys7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG51bWJlclN1bmsgPT09IDU7XG4gICAgfSxcbiAgfTtcbn1cbmV4cG9ydCB7IEdhbWVib2FyZCB9O1xuIiwiaW1wb3J0IHsgR2FtZWJvYXJkIH0gZnJvbSBcIi4vZ2FtZWJvYXJkXCI7XG5cbmZ1bmN0aW9uIFBsYXllcihuYW1lLCBodW1hbk9yQ29tcCkge1xuICByZXR1cm4ge1xuICAgIGh1bWFuT3JDb21wLFxuICAgIG5hbWUsXG4gICAgaXNBY3RpdmVQbGF5ZXI6IGZhbHNlLFxuICAgIGdhbWVib2FyZDogbmV3IEdhbWVib2FyZChuYW1lKSxcbiAgICBhdHRhY2soZW5lbXksIGF0dGFja1lBeGlzLCBhdHRhY2tYYXhpcykge1xuICAgICAgZW5lbXkuZ2FtZWJvYXJkLnJlY2VpdmVBdHRhY2soYXR0YWNrWUF4aXMsIGF0dGFja1hheGlzKTtcbiAgICB9LFxuICAgIGJlZ2luVHVybigpIHtcbiAgICAgIHRoaXMuaXNBY3RpdmVQbGF5ZXIgPSB0cnVlO1xuICAgIH0sXG4gICAgZW5kVHVybigpIHtcbiAgICAgIHRoaXMuaXNBY3RpdmVQbGF5ZXIgPSBmYWxzZTtcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgeyBQbGF5ZXIgfTtcbiIsImltcG9ydCB7IFBsYXllciB9IGZyb20gXCIuL3BsYXllclwiO1xuXG5jb25zdCBIZWxwZXJGdW5jdGlvbnMgPSB7XG4gIGNyZWF0ZVBsYXllcnMocGxheWVyMU5hbWUsIHBsYXllcjJOYW1lKSB7XG4gICAgY29uc3QgcGxheWVyMSA9IG5ldyBQbGF5ZXIocGxheWVyMU5hbWUsIFwiaHVtYW5cIik7XG4gICAgY29uc3QgcGxheWVyMiA9IG5ldyBQbGF5ZXIocGxheWVyMk5hbWUsIFwiY29tcHV0ZXJcIik7XG4gICAgY29uc3QgcGxheWVycyA9IFtwbGF5ZXIxLCBwbGF5ZXIyXTtcbiAgICByZXR1cm4gcGxheWVycztcbiAgfSxcbn07XG5cbmNvbnN0IEdhbWVMb29wID0ge1xuICBwbGF5ZXJzOiBbXSxcblxuICBzZXRQbGF5ZXJzKHBsYXllcjFOYW1lKSB7XG4gICAgY29uc3QgbmV3UGxheWVycyA9IEhlbHBlckZ1bmN0aW9ucy5jcmVhdGVQbGF5ZXJzKHBsYXllcjFOYW1lLCBcImNvbXB5XCIpO1xuICAgIHRoaXMucGxheWVycyA9IG5ld1BsYXllcnM7XG4gIH0sXG59O1xuXG5leHBvcnQgeyBHYW1lTG9vcCB9O1xuIiwiaW1wb3J0IHsgcGxhY2VOZXh0U2hpcCB9IGZyb20gXCIuL2RvbVN0dWZmXCI7XG5pbXBvcnQgeyBHYW1lTG9vcCB9IGZyb20gXCIuL2dhbWVMb29wXCI7XG5cbi8vIG1ha2VzIHRoZSBtb2R1bGUgZm9yIHBsYWNpbmcgc2hpcHNcbmZ1bmN0aW9uIHJlbmRlclNoaXBNb2R1bGUoc2hpcFRvUGxhY2UpIHtcbiAgY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpO1xuICBjb25zdCBtb2R1bGVCYWNrZ3JvdW5kID0gY3JlYXRlTmV3RWxlbWVudChcbiAgICBcImRpdlwiLFxuICAgIFwibW9kdWxlQmFja2dyb3VuZFwiLFxuICAgIGAgICA8aDE+UGxhY2UgWW91ciBTaGlwcyE8L2gxPjxkaXYgaWQ9XCJwbGF5ZXJCb2FyZFwiPjwvZGl2PjxkaXYgaWQ9J3NoaXBUeXBlJz48aDIgaWQ9J3BsYWNlWW91clRoaXNTaGlwJz48L2Rpdj48L2Rpdj5gXG4gICk7XG4gIGJvZHkuYXBwZW5kQ2hpbGQobW9kdWxlQmFja2dyb3VuZCk7XG4gIHJlbmRlck9iamVjdChidWlsZFBsYWNlbWVudEJvYXJkKEdhbWVMb29wLnBsYXllcnNbMF0pLCBcIiNwbGF5ZXJCb2FyZFwiKTtcbiAgcmVuZGVyT2JqZWN0KFxuICAgIGNyZWF0ZU5ld0VsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAgXCJzaGlwQW5kRmxpcFwiLFxuICAgICAgYDxoMj5DbGljayBvbiBhIHNxdWFyZSB0byBwbGFjZSB5b3VyICR7c2hpcFRvUGxhY2UubmFtZX08L2gyPjxidXR0b24gaWQ9XCJyb3RhdGVcIj5Sb3RhdGUgU2hpcDwvYnV0dG9uPmBcbiAgICApLFxuICAgIFwiI3NoaXBUeXBlXCJcbiAgKTtcbiAgbGV0IHNoaXBUb1BsYWNlSW5uZXJIdG1sID0gYDxkaXYgY2xhc3M9XCJjZWxsXCI+PC9kaXY+YDtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBzaGlwVG9QbGFjZS5sZW5ndGg7IGkrKykge1xuICAgIHNoaXBUb1BsYWNlSW5uZXJIdG1sICs9IGA8ZGl2IGNsYXNzPVwiY2VsbFwiPjwvZGl2PmA7XG4gIH1cbiAgcmVuZGVyT2JqZWN0KFxuICAgIGNyZWF0ZU5ld0VsZW1lbnQoXCJkaXZcIiwgYCR7c2hpcFRvUGxhY2UubmFtZX1gLCBgJHtzaGlwVG9QbGFjZUlubmVySHRtbH1gKSxcbiAgICBcIiNzaGlwVHlwZVwiXG4gICk7XG4gIGFkZFNoaXBQbGFjZW1lbnRMaXN0ZW5lcihzaGlwVG9QbGFjZSk7XG4gIHJvdGF0ZUV2ZW50TGlzdGVuZXIoc2hpcFRvUGxhY2UubmFtZSk7XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZUV2ZW50TGlzdGVuZXIoc2hpcE5hbWUpIHtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJ1dHRvblwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgIHJvdGF0ZVNoaXAoc2hpcE5hbWUpO1xuICB9KTtcbn1cblxuLy8gZnVuY3Rpb24gdG8gcm90YXRlIHRoZSBzaGlwIG9uIHRoZSBwYWdlXG5mdW5jdGlvbiByb3RhdGVTaGlwKHNoaXBOYW1lKSB7XG4gIGNvbnN0IHNoaXBEb20gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuJHtzaGlwTmFtZX1gKTtcbiAgc2hpcERvbS5jbGFzc0xpc3QudG9nZ2xlKFwiZmxpcFwiKTtcbn1cblxuLy8gYnVpbGQgdGhlIHBsYXllciAxIGdhbWVib2FyZFxuZnVuY3Rpb24gYnVpbGRQbGFjZW1lbnRCb2FyZChwbGF5ZXIpIHtcbiAgY29uc3QgcGxheWVyQm9hcmRDb250YWluZXIgPSBjcmVhdGVOZXdFbGVtZW50KFwiZGl2XCIsIGBodW1hbmAsIFwiIFwiKTtcbiAgY29uc3QgYm9hcmRDb250YWluZXIgPSBjcmVhdGVOZXdFbGVtZW50KFwiZGl2XCIsIGBncmlkaWZ5YCwgXCIgXCIpO1xuICBwbGF5ZXJCb2FyZENvbnRhaW5lci5hcHBlbmRDaGlsZChib2FyZENvbnRhaW5lcik7XG4gIHBsYXllci5nYW1lYm9hcmQuZ2FtZWJvYXJkLmZvckVhY2goKHJvdykgPT4ge1xuICAgIGNvbnN0IHJvd0RpdiA9IGNyZWF0ZU5ld0VsZW1lbnQoXCJkaXZcIiwgXCJyb3dcIiwgXCIgXCIpO1xuICAgIHJvdy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICBjb25zdCBjZWxsRGl2ID0gY3JlYXRlTmV3RWxlbWVudChcImRpdlwiLCBgaHVtYW5gLCBcIiBcIik7XG4gICAgICBjZWxsRGl2LmNsYXNzTGlzdC5hZGQoXCJjZWxsXCIpO1xuICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBjZWxsKSB7XG4gICAgICAgIGNlbGxEaXYuc2V0QXR0cmlidXRlKGAke3Byb3BlcnR5fWAsIGAke2NlbGxbcHJvcGVydHldfWApO1xuICAgICAgfVxuICAgICAgcm93RGl2LmFwcGVuZENoaWxkKGNlbGxEaXYpO1xuICAgIH0pO1xuICAgIGJvYXJkQ29udGFpbmVyLmFwcGVuZENoaWxkKHJvd0Rpdik7XG4gIH0pO1xuICByZXR1cm4gcGxheWVyQm9hcmRDb250YWluZXI7XG59XG5cbi8vIHJlbmRlcnMgZG9tIGVsZW1lbnRzIHRvIHRoZSBwYWdlXG5mdW5jdGlvbiByZW5kZXJPYmplY3QoRG9tSXRlbVRvUmVuZGVyLCB3aGVyZVRvUmVuZGVyKSB7XG4gIGNvbnN0IHJlbmRlckxvY2F0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih3aGVyZVRvUmVuZGVyKTtcbiAgcmVuZGVyTG9jYXRpb24uYXBwZW5kQ2hpbGQoRG9tSXRlbVRvUmVuZGVyKTtcbn1cblxuLy9jcmVhdGVzIGVsZW1lbnQsIGFkZHMgYSBjbGFzcywgYW5kIGlubmVySFRNTFxuZnVuY3Rpb24gY3JlYXRlTmV3RWxlbWVudCh0eXBlLCBhZGRDbGFzcywgaW5uZXJIVE1MKSB7XG4gIGNvbnN0IGRvbUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuICBkb21FbGVtZW50LmNsYXNzTGlzdC5hZGQoYWRkQ2xhc3MpO1xuICBkb21FbGVtZW50LmlubmVySFRNTCA9IGlubmVySFRNTDtcbiAgcmV0dXJuIGRvbUVsZW1lbnQ7XG59XG5cbi8vIGV2ZW50IGxpc3RlbmVycyBmb3IgcGxhY2luZyBzaGlwc1xuZnVuY3Rpb24gYWRkU2hpcFBsYWNlbWVudExpc3RlbmVyKHNoaXBOYW1lKSB7XG4gIGNvbnN0IGJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5ncmlkaWZ5XCIpO1xuICBib2FyZC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChlKSA9PiB7XG4gICAgY29uc3QgeVZhbHVlID0gZS50YXJnZXQuYXR0cmlidXRlc1szXS52YWx1ZVswXTtcbiAgICBjb25zdCB4VmFsdWUgPSBlLnRhcmdldC5hdHRyaWJ1dGVzWzNdLnZhbHVlWzJdO1xuICAgIGxldCBheGlzO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC4ke3NoaXBOYW1lLm5hbWV9YCkuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZmxpcFwiKVxuICAgICAgPyAoYXhpcyA9IFwieVwiKVxuICAgICAgOiAoYXhpcyA9IFwieFwiKTtcblxuICAgIGNvbnN0IHZhbGlkUGxhY2VtZW50ID0gR2FtZUxvb3AucGxheWVyc1swXS5nYW1lYm9hcmQucGxhY2VTaGlwKFxuICAgICAgc2hpcE5hbWUubmFtZSxcbiAgICAgIHlWYWx1ZSxcbiAgICAgIHhWYWx1ZSxcbiAgICAgIGF4aXNcbiAgICApO1xuICAgIGlmICh2YWxpZFBsYWNlbWVudCA9PT0gXCJlcnJvclwiKSB7XG4gICAgICBjb25zb2xlLmxvZyhcInlvdSBjYW4ndCBwbGFjZSBhIHNoaXAgdGhlcmUhXCIpO1xuICAgIH0gZWxzZSBwbGFjZU5leHRTaGlwKCk7XG4gIH0pO1xufVxuXG5leHBvcnQgeyByZW5kZXJTaGlwTW9kdWxlIH07XG4iLCJpbXBvcnQgeyBHYW1lTG9vcCB9IGZyb20gXCIuL2dhbWVMb29wXCI7XG5pbXBvcnQgeyByZW5kZXJTaGlwTW9kdWxlIH0gZnJvbSBcIi4vcGxhY2VTaGlwc1wiO1xuXG5jb25zdCBhbGxFdmVudExpc3RlbmVycyA9IHtcbiAgdGVzdDogdHJ1ZSxcbiAgYWRkUGxheWVyMUxpc3RlbmVyOiAoKSA9PiB7XG4gICAgY29uc3QgcGxheWVyRm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGxheWVyMVwiKTtcbiAgICBwbGF5ZXJGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IHBsYXllckRhdGEgPSBuZXcgRm9ybURhdGEocGxheWVyRm9ybSk7XG4gICAgICBjb25zdCBwbGF5ZXIxID0gcGxheWVyRGF0YS5nZXQoXCJwbGF5ZXJcIik7XG4gICAgICBHYW1lTG9vcC5zZXRQbGF5ZXJzKHBsYXllcjEpO1xuICAgICAgZXJhc2VQYWdlQ29udGVudCgpO1xuICAgICAgLy8gcGxhY2UgeW91ciBzaGlwc1xuICAgICAgcGxhY2VOZXh0U2hpcCgpO1xuICAgIH0pO1xuICB9LFxufTtcblxuZnVuY3Rpb24gcGxhY2VOZXh0U2hpcCgpIHtcbiAgaWYgKEdhbWVMb29wLnBsYXllcnNbMF0uZ2FtZWJvYXJkLnNoaXBzWzBdLmxvY2F0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICByZW5kZXJTaGlwTW9kdWxlKEdhbWVMb29wLnBsYXllcnNbMF0uZ2FtZWJvYXJkLnNoaXBzWzBdKTtcbiAgfSBlbHNlIGlmIChHYW1lTG9vcC5wbGF5ZXJzWzBdLmdhbWVib2FyZC5zaGlwc1sxXS5sb2NhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgZXJhc2VNb2R1bGUoKTtcbiAgICByZW5kZXJTaGlwTW9kdWxlKEdhbWVMb29wLnBsYXllcnNbMF0uZ2FtZWJvYXJkLnNoaXBzWzFdKTtcbiAgfSBlbHNlIGlmIChHYW1lTG9vcC5wbGF5ZXJzWzBdLmdhbWVib2FyZC5zaGlwc1syXS5sb2NhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgZXJhc2VNb2R1bGUoKTtcbiAgICByZW5kZXJTaGlwTW9kdWxlKEdhbWVMb29wLnBsYXllcnNbMF0uZ2FtZWJvYXJkLnNoaXBzWzJdKTtcbiAgfSBlbHNlIGlmIChHYW1lTG9vcC5wbGF5ZXJzWzBdLmdhbWVib2FyZC5zaGlwc1szXS5sb2NhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgZXJhc2VNb2R1bGUoKTtcbiAgICByZW5kZXJTaGlwTW9kdWxlKEdhbWVMb29wLnBsYXllcnNbMF0uZ2FtZWJvYXJkLnNoaXBzWzNdKTtcbiAgfSBlbHNlIGlmIChHYW1lTG9vcC5wbGF5ZXJzWzBdLmdhbWVib2FyZC5zaGlwc1s0XS5sb2NhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgZXJhc2VNb2R1bGUoKTtcbiAgICByZW5kZXJTaGlwTW9kdWxlKEdhbWVMb29wLnBsYXllcnNbMF0uZ2FtZWJvYXJkLnNoaXBzWzRdKTtcbiAgfSBlbHNlIHtcbiAgICBlcmFzZU1vZHVsZSgpO1xuICAgIGNvbnNvbGUubG9nKFwic3RhcnQgZ2FtZSFcIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXJhc2VNb2R1bGUoKSB7XG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKTtcbiAgY29uc3QgbW9kdWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2R1bGVCYWNrZ3JvdW5kXCIpO1xuICBib2R5LnJlbW92ZUNoaWxkKG1vZHVsZSk7XG59XG5cbmZ1bmN0aW9uIGVyYXNlUGFnZUNvbnRlbnQoKSB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29udGFpbmVyXCIpO1xuICB3aGlsZSAoY29udGFpbmVyLmZpcnN0Q2hpbGQpIHtcbiAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoY29udGFpbmVyLmZpcnN0RWxlbWVudENoaWxkKTtcbiAgfVxufVxuXG4vLyByZW5kZXJzIGEgcGxheWVycyBib2FyZFxuZnVuY3Rpb24gcmVuZGVyQm9hcmQocGxheWVyLCBodW1hbk9yQ29tcCkge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvbnRhaW5lclwiKTtcbiAgY29uc3QgcGxheWVyQm9hcmRDb250YWluZXIgPSBjcmVhdGVOZXdFbGVtZW50KFwiZGl2XCIsIGAke2h1bWFuT3JDb21wfWAsIFwiIFwiKTtcbiAgY29uc3QgYm9hcmRDb250YWluZXIgPSBjcmVhdGVOZXdFbGVtZW50KFwiZGl2XCIsIGBncmlkaWZ5YCwgXCIgXCIpO1xuICBwbGF5ZXJCb2FyZENvbnRhaW5lci5hcHBlbmRDaGlsZChib2FyZENvbnRhaW5lcik7XG4gIHBsYXllci5nYW1lYm9hcmQuZ2FtZWJvYXJkLmZvckVhY2goKHJvdykgPT4ge1xuICAgIGNvbnN0IHJvd0RpdiA9IGNyZWF0ZU5ld0VsZW1lbnQoXCJkaXZcIiwgXCJyb3dcIiwgXCIgXCIpO1xuICAgIHJvdy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICBjb25zdCBjZWxsRGl2ID0gY3JlYXRlTmV3RWxlbWVudChcImRpdlwiLCBgJHtodW1hbk9yQ29tcH1gLCBcIiBcIik7XG4gICAgICBjZWxsRGl2LmNsYXNzTGlzdC5hZGQoXCJjZWxsXCIpO1xuICAgICAgcm93RGl2LmFwcGVuZENoaWxkKGNlbGxEaXYpO1xuICAgIH0pO1xuICAgIGJvYXJkQ29udGFpbmVyLmFwcGVuZENoaWxkKHJvd0Rpdik7XG4gIH0pO1xuICBwbGF5ZXJCb2FyZENvbnRhaW5lci5hcHBlbmRDaGlsZChcbiAgICBjcmVhdGVOZXdFbGVtZW50KFwiaDRcIiwgXCJib2FyZFRpdGxlXCIsIGBUaGlzIGlzICR7cGxheWVyLm5hbWV9J3MgYm9hcmRgKVxuICApO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQocGxheWVyQm9hcmRDb250YWluZXIpO1xufVxuXG4vLyBjcmVhdGVzIGEgZmFuY3kgZWxlbWVudCB3aXRoIGNsYXNzIGFuZCBpbm50ZXJIVE1MIGltYmVkZGVkXG5mdW5jdGlvbiBjcmVhdGVOZXdFbGVtZW50KHR5cGUsIGFkZENsYXNzLCBpbm5lckhUTUwpIHtcbiAgY29uc3QgZG9tRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSk7XG4gIGRvbUVsZW1lbnQuY2xhc3NMaXN0LmFkZChhZGRDbGFzcyk7XG4gIGRvbUVsZW1lbnQuaW5uZXJIVE1MID0gaW5uZXJIVE1MO1xuICByZXR1cm4gZG9tRWxlbWVudDtcbn1cblxuZXhwb3J0IHsgYWxsRXZlbnRMaXN0ZW5lcnMsIHJlbmRlckJvYXJkLCBwbGFjZU5leHRTaGlwIH07XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgYWxsRXZlbnRMaXN0ZW5lcnMgfSBmcm9tIFwiLi9zY3JpcHRzL2RvbVN0dWZmXCI7XG5pbXBvcnQgXCIuL3N0eWxlLnNjc3NcIjtcblxuYWxsRXZlbnRMaXN0ZW5lcnMuYWRkUGxheWVyMUxpc3RlbmVyKCk7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm5jIiwiU2hpcCIsIm5hbWUiLCJsb2NhdGlvbnMiLCJudW1IaXRzIiwicGxhY2VTaGlwIiwic3RhcnRpbmdDZWxseSIsInN0YXJ0aW5nQ2VsbHgiLCJheGlzIiwiTnVtYmVyIiwieF9heGlzIiwieV9heGlzIiwiaGl0IiwiY2VsbCIsImJvdW5kaW5jcmVhc2VYQXhpcyIsIm5ld0xvY2F0aW9uIiwiYmluZCIsImJvdW5kaW5jcmVhc2VZQXhpcyIsImNlbGxIaXRZIiwiY2VsbEhpdFgiLCJmb3JFYWNoIiwibG9jYXRpb24iLCJpc1N1bmsiLCJidWlsZEdhbWVib2FyZCIsImdhbWVib2FyZCIsImJvYXJkUm93IiwiaiIsInRoaXNCb2FyZENlbGwiLCJib2F0Iiwic2hvdEhlcmUiLCJnZXRTaGlwSW5kZXgiLCJzaGlwTmFtZSIsInNoaXBJbmRleCIsImNvbnNvbGUiLCJsb2ciLCJHYW1lYm9hcmQiLCJvd25lciIsInNoaXBzIiwic3RhcnRpbmd5Iiwic3RhcnRpbmd4IiwiY3VycmVudEdhbWVib2FyZCIsIm5ld1NoaXBTdGFydGluZ3kiLCJuZXdTaGlwU3RhcnRpbmd4IiwibmV3U2hpcFNpemUiLCJ2YWxpZExvY2F0aW9uIiwibmV3U2hpcCIsInJvdyIsInNoaXBMb2NhdGlvbiIsImNoZWNrVmFsaWRTaGlwTG9jYXRpb24iLCJzaGlwIiwidGhpc0dhbWVib2FyZCIsInJldHVybkdhbWVib2FyZCIsInVwZGF0ZUdhbWVib2FyZFdpdGhOZXdTaGlwTG9jYXRpb24iLCJyZWNlaXZlQXR0YWNrIiwieUF4aXMiLCJ4QXhpcyIsImJvYXRJbmRleCIsImFsbFN1bmsiLCJudW1iZXJTdW5rIiwiUGxheWVyIiwiaHVtYW5PckNvbXAiLCJpc0FjdGl2ZVBsYXllciIsImF0dGFjayIsImVuZW15IiwiYXR0YWNrWUF4aXMiLCJhdHRhY2tYYXhpcyIsImJlZ2luVHVybiIsImVuZFR1cm4iLCJIZWxwZXJGdW5jdGlvbnMiLCJwbGF5ZXIxTmFtZSIsInBsYXllcjJOYW1lIiwiR2FtZUxvb3AiLCJwbGF5ZXJzIiwic2V0UGxheWVycyIsIm5ld1BsYXllcnMiLCJyZW5kZXJTaGlwTW9kdWxlIiwic2hpcFRvUGxhY2UiLCJib2R5IiwibW9kdWxlQmFja2dyb3VuZCIsImNyZWF0ZU5ld0VsZW1lbnQiLCJyZW5kZXJPYmplY3QiLCJwbGF5ZXIiLCJwbGF5ZXJCb2FyZENvbnRhaW5lciIsImJvYXJkQ29udGFpbmVyIiwicm93RGl2IiwiY2VsbERpdiIsImNsYXNzTGlzdCIsImFkZCIsInByb3BlcnR5IiwiYnVpbGRQbGFjZW1lbnRCb2FyZCIsInNoaXBUb1BsYWNlSW5uZXJIdG1sIiwiYWRkRXZlbnRMaXN0ZW5lciIsInlWYWx1ZSIsInZhbHVlIiwieFZhbHVlIiwiY29udGFpbnMiLCJwbGFjZU5leHRTaGlwIiwidG9nZ2xlIiwicm90YXRlU2hpcCIsInJvdGF0ZUV2ZW50TGlzdGVuZXIiLCJEb21JdGVtVG9SZW5kZXIiLCJ3aGVyZVRvUmVuZGVyIiwidHlwZSIsImFkZENsYXNzIiwiaW5uZXJIVE1MIiwiZG9tRWxlbWVudCIsImVyYXNlTW9kdWxlIiwicGxheWVyRm9ybSIsImdldEVsZW1lbnRCeUlkIiwicHJldmVudERlZmF1bHQiLCJwbGF5ZXIxIiwiRm9ybURhdGEiLCJjb250YWluZXIiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImVyYXNlUGFnZUNvbnRlbnQiLCJhbGxFdmVudExpc3RlbmVycyJdLCJzb3VyY2VSb290IjoiIn0=