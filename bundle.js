(()=>{"use strict";var e={192:(e,n,t)=>{t.d(n,{Z:()=>A});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,'.gridify{margin:auto;width:25vh;height:25vh;display:flex;flex-direction:column}.row{display:flex;width:100%;height:100%}.cell{width:100%;height:100%;border:1px solid #000}.cell:hover{background-color:bisque;cursor:pointer}div[shothere=true]{background-color:red}div[boat=null][shothere=true]::after{background-color:#fff;display:flex;justify-content:center;align-items:center;flex-direction:"row";content:"X";height:100%;width:100%}.moduleBackground{position:absolute;top:0;left:0;width:100vw;height:100vh;background-color:#fff}.moduleBackground h1{color:#000;align-self:center;font-size:5rem;text-align:center;padding:.25em 0}.carrier{display:flex;height:2.5vh;width:12.5vh;background-color:gray;margin:auto}.carrier.flip{height:12.5vh;width:2.5vh;flex-direction:column}.battleship{display:flex;height:2.5vh;width:10vh;background-color:gray;margin:auto}.battleship.flip{height:10vh;width:2.5vh;flex-direction:column}.cruiser{display:flex;height:2.5vh;width:7.5vh;background-color:gray;margin:auto}.cruiser.flip{height:7.5vh;width:2.5vh;flex-direction:column}.sub{display:flex;height:2.5vh;width:7.5vh;background-color:gray;margin:auto}.sub.flip{height:7.5vh;width:2.5vh;flex-direction:column}.patrolBoat{display:flex;height:2.5vh;width:5vh;background-color:gray;margin:auto}.patrolBoat.flip{height:5vh;width:2.5vw;flex-direction:column}.shipAndFlip{display:flex;flex-direction:column}.shipAndFlip h2{color:#000;align-self:center;font-size:3rem;text-align:center;padding:.5em 0 0 0}.shipAndFlip .errorMsg{color:red;font-size:1.5rem;background-color:#ff8f8f;border-radius:10px;padding:0}#rotate{height:5vw;padding:0 2em;align-self:center;font-size:1.25rem;margin:0 0 1em 0;border-radius:18px}div .human[boat=carrier]{background-color:#dfbf57}div .human[boat=carrier][shothere=true]{background-color:red}div .human[boat=battleship]{background-color:#0d9467}div .human[boat=battleship][shothere=true]{background-color:red}div .human[boat=cruiser]{background-color:#530d3c}div .human[boat=cruiser][shothere=true]{background-color:red}div .human[boat=sub]{background-color:#dd7a7a}div .human[boat=sub][shothere=true]{background-color:red}div .human[boat=patrolBoat]{background-color:#1a5f61}div .human[boat=patrolBoat][shothere=true]{background-color:red}div .human[boat=null]{background-color:#fff}div .human[boat=null]:hover{background-color:#faebd7}form{display:flex;justify-content:center;align-items:center;flex-direction:column;height:100%;width:100%;margin-top:-5vh}.playerName{font-size:2rem}.playerName>input{font-size:1.5rem;padding-left:.1em;margin-bottom:1em}.playerName+button{font-size:1.5rem;padding:.5em;border-radius:8px}*{box-sizing:border-box;margin:0;padding:0}body{height:100vh;width:100vw}h1{display:flex;justify-content:center;align-items:center;flex-direction:row;color:red;height:10%;font-size:3rem;font-weight:700}.container{height:90%;width:100%}.boardTitle{margin:-1em auto auto auto;padding:1.25em;font-size:1.25rem}.turnInfo{display:flex;justify-content:center;align-items:center;flex-direction:column;height:10%;font-size:1.5rem}.turnInfo>button{padding:.5em;font-size:1.5rem;display:block;border-radius:8px}.turnInfo>button:hover{opacity:.5}.container>div{height:45%;width:100%}.human,.computer{display:flex;flex-direction:column}',"",{version:3,sources:["webpack://./src/scss/_grid.scss","webpack://./src/scss/_variableAndFunctions.scss","webpack://./src/scss/_placeShips.scss","webpack://./src/scss/_newGame.scss","webpack://./src/style.scss"],names:[],mappings:"AAEA,SACE,WAAA,CACA,UAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CAEF,KACE,YAAA,CACA,UAAA,CACA,WAAA,CAGF,MACE,UAAA,CACA,WAAA,CACA,qBCXY,CDYZ,YACE,uBAAA,CACA,cAAA,CAKF,mBACE,oBAAA,CAIE,qCACE,qBAAA,CC/BN,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,oBD6B0B,CACpB,WAAA,CACA,WAAA,CACA,UAAA,CElCR,kBACE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CACA,qBACE,UAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,eAAA,CAIJ,SACE,YAAA,CACA,YAAA,CACA,YAAA,CACA,qBAAA,CACA,WAAA,CACA,cACE,aAAA,CACA,WAAA,CACA,qBAAA,CAGJ,YACE,YAAA,CACA,YAAA,CACA,UAAA,CACA,qBAAA,CACA,WAAA,CACA,iBACE,WAAA,CACA,WAAA,CACA,qBAAA,CAGJ,SACE,YAAA,CACA,YAAA,CACA,WAAA,CACA,qBAAA,CACA,WAAA,CACA,cACE,YAAA,CACA,WAAA,CACA,qBAAA,CAGJ,KACE,YAAA,CACA,YAAA,CACA,WAAA,CACA,qBAAA,CACA,WAAA,CACA,UACE,YAAA,CACA,WAAA,CACA,qBAAA,CAGJ,YACE,YAAA,CACA,YAAA,CACA,SAAA,CACA,qBAAA,CACA,WAAA,CACA,iBACE,UAAA,CACA,WAAA,CACA,qBAAA,CAIJ,aACE,YAAA,CACA,qBAAA,CACA,gBACE,UAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,kBAAA,CAEF,uBACE,SAAA,CACA,gBAAA,CACA,wBAAA,CACA,kBAAA,CACA,SAAA,CAIJ,QACE,UAAA,CACA,aAAA,CACA,iBAAA,CACA,iBAAA,CACA,gBAAA,CACA,kBAAA,CAKE,yBACE,wBAAA,CACA,wCACE,oBAAA,CAGJ,4BACE,wBAAA,CACA,2CACE,oBAAA,CAGJ,yBACE,wBAAA,CACA,wCACE,oBAAA,CAGJ,qBACE,wBAAA,CACA,oCACE,oBAAA,CAGJ,4BACE,wBAAA,CACA,2CACE,oBAAA,CAGJ,sBACE,qBAAA,CACA,4BACE,wBAAA,CC5IR,KFDE,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,qBEDoB,CACpB,WAAA,CACA,UAAA,CACA,eAAA,CAGF,YACE,cAAA,CACA,kBACE,gBAAA,CACA,iBAAA,CACA,iBAAA,CAEF,mBACE,gBAAA,CACA,YAAA,CACA,iBAAA,CCdJ,EACE,qBAAA,CACA,QAAA,CACA,SAAA,CAEF,KACE,YAAA,CACA,WAAA,CAGF,GHdE,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,kBGYoB,CACpB,SAAA,CACA,UAAA,CACA,cAAA,CACA,eAAA,CAGF,WACE,UAAA,CACA,UAAA,CAGF,YACE,0BAAA,CACA,cAAA,CACA,iBAAA,CAGF,UHjCE,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,qBG+BoB,CACpB,UAAA,CACA,gBAAA,CACA,iBACE,YAAA,CACA,gBAAA,CACA,aAAA,CACA,iBAAA,CACA,uBACE,UAAA,CAKN,eACE,UAAA,CACA,UAAA,CAGF,iBAEE,YAAA,CACA,qBAAA",sourcesContent:['@import "../scss/variableAndFunctions";\n\n.gridify {\n  margin: auto;\n  width: 25vh;\n  height: 25vh;\n  display: flex;\n  flex-direction: column;\n}\n.row {\n  display: flex;\n  width: 100%;\n  height: 100%;\n}\n\n.cell {\n  width: 100%;\n  height: 100%;\n  border: $test-border;\n  &:hover {\n    background-color: bisque;\n    cursor: pointer;\n  }\n}\n\ndiv {\n  &[shothere="true"] {\n    background-color: red;\n  }\n  &[boat="null"] {\n    &[shothere="true"] {\n      &::after {\n        background-color: white;\n        @include flexCenter("row");\n        content: "X";\n        height: 100%;\n        width: 100%;\n      }\n    }\n  }\n}\n','@mixin flexCenter($direction) {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: $direction;\n}\n\n$test-border: 1px solid black;\n$boatColor: black;\n\n$font-weights: (\n  "light": 300,\n  "regular": 400,\n  "medium": 500,\n  "bold": 700,\n);\n\n@function weight($weight-name) {\n  @return map-get($map: $font-weights, $key: $weight-name);\n}\n','@import "../scss/variableAndFunctions";\n\n.moduleBackground {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(255, 255, 255, 1);\n  h1 {\n    color: black;\n    align-self: center;\n    font-size: 5rem;\n    text-align: center;\n    padding: 0.25em 0;\n  }\n}\n\n.carrier {\n  display: flex;\n  height: 2.5vh;\n  width: 12.5vh;\n  background-color: grey;\n  margin: auto;\n  &.flip {\n    height: 12.5vh;\n    width: 2.5vh;\n    flex-direction: column;\n  }\n}\n.battleship {\n  display: flex;\n  height: 2.5vh;\n  width: 10vh;\n  background-color: grey;\n  margin: auto;\n  &.flip {\n    height: 10vh;\n    width: 2.5vh;\n    flex-direction: column;\n  }\n}\n.cruiser {\n  display: flex;\n  height: 2.5vh;\n  width: 7.5vh;\n  background-color: grey;\n  margin: auto;\n  &.flip {\n    height: 7.5vh;\n    width: 2.5vh;\n    flex-direction: column;\n  }\n}\n.sub {\n  display: flex;\n  height: 2.5vh;\n  width: 7.5vh;\n  background-color: grey;\n  margin: auto;\n  &.flip {\n    height: 7.5vh;\n    width: 2.5vh;\n    flex-direction: column;\n  }\n}\n.patrolBoat {\n  display: flex;\n  height: 2.5vh;\n  width: 5vh;\n  background-color: grey;\n  margin: auto;\n  &.flip {\n    height: 5vh;\n    width: 2.5vw;\n    flex-direction: column;\n  }\n}\n\n.shipAndFlip {\n  display: flex;\n  flex-direction: column;\n  h2 {\n    color: black;\n    align-self: center;\n    font-size: 3rem;\n    text-align: center;\n    padding: 0.5em 0 0 0;\n  }\n  .errorMsg {\n    color: red;\n    font-size: 1.5rem;\n    background-color: #ff8f8f;\n    border-radius: 10px;\n    padding: 0;\n  }\n}\n\n#rotate {\n  height: 5vw;\n  padding: 0 2em;\n  align-self: center;\n  font-size: 1.25rem;\n  margin: 0 0 1em 0;\n  border-radius: 18px;\n}\n\ndiv {\n  & .human {\n    &[boat="carrier"] {\n      background-color: rgb(223, 191, 87);\n      &[shothere="true"] {\n        background-color: red;\n      }\n    }\n    &[boat="battleship"] {\n      background-color: rgb(13, 148, 103);\n      &[shothere="true"] {\n        background-color: red;\n      }\n    }\n    &[boat="cruiser"] {\n      background-color: rgb(83, 13, 60);\n      &[shothere="true"] {\n        background-color: red;\n      }\n    }\n    &[boat="sub"] {\n      background-color: rgb(221, 122, 122);\n      &[shothere="true"] {\n        background-color: red;\n      }\n    }\n    &[boat="patrolBoat"] {\n      background-color: rgb(26, 95, 97);\n      &[shothere="true"] {\n        background-color: red;\n      }\n    }\n    &[boat="null"] {\n      background-color: white;\n      &:hover {\n        background-color: antiquewhite;\n      }\n    }\n  }\n}\n','@import "../scss/variableAndFunctions";\n\nform {\n  @include flexCenter(column);\n  height: 100%;\n  width: 100%;\n  margin-top: -5vh;\n}\n\n.playerName {\n  font-size: 2rem;\n  & > input {\n    font-size: 1.5rem;\n    padding-left: 0.1em;\n    margin-bottom: 1em;\n  }\n  + button {\n    font-size: 1.5rem;\n    padding: 0.5em;\n    border-radius: 8px;\n  }\n}\n','@import "./scss/grid.scss";\n@import "./scss/placeShips";\n@import "./scss/newGame";\n@import "./scss/variableAndFunctions";\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\nbody {\n  height: 100vh;\n  width: 100vw;\n}\n\nh1 {\n  @include flexCenter(row);\n  color: red;\n  height: 10%;\n  font-size: 3rem;\n  font-weight: weight(bold);\n}\n\n.container {\n  height: 90%;\n  width: 100%;\n}\n\n.boardTitle {\n  margin: -1em auto auto auto;\n  padding: 1.25em;\n  font-size: 1.25rem;\n}\n\n.turnInfo {\n  @include flexCenter(column);\n  height: 10%;\n  font-size: 1.5rem;\n  & > button {\n    padding: 0.5em;\n    font-size: 1.5rem;\n    display: block;\n    border-radius: 8px;\n    &:hover {\n      opacity: 0.5;\n    }\n  }\n}\n\n.container > div {\n  height: 45%;\n  width: 100%;\n}\n\n.human,\n.computer {\n  display: flex;\n  flex-direction: column;\n}\n'],sourceRoot:""}]);const A=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var A=0;A<this.length;A++){var c=this[A][0];null!=c&&(i[c]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],A=0;A<e.length;A++){var c=e[A],s=r.base?c[0]+r.base:c[0],l=a[s]||0,d="".concat(s," ").concat(l);a[s]=l+1;var h=t(d),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)n[h].references++,n[h].updater(u);else{var C=o(u,r);r.byIndex=A,n.splice(A,0,{identifier:d,updater:C,references:1})}i.push(d)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var A=t(a[i]);n[A].references--}for(var c=r(e,o),s=0;s<a.length;s++){var l=t(a[s]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{function e(e){const t=document.querySelector("body"),o=r("div","moduleBackground","   <h1>Place Your Ships!</h1><div id=\"playerBoard\"></div><div id='shipType'><h2 id='placeYourThisShip'></div></div>");t.appendChild(o),n(function(e){const n=r("div","human"," "),t=r("div","gridify"," ");return n.appendChild(t),e.gameboard.gameboard.forEach((e=>{const n=r("div","row"," ");e.forEach((e=>{const t=r("div","human"," ");t.classList.add("cell");for(const n in e)t.setAttribute("".concat(n),"".concat(e[n]));n.appendChild(t)})),t.appendChild(n)})),n}(g.players[0]),"#playerBoard"),n(r("div","shipAndFlip","<h2>Click on a square to place your ".concat(e.name,'<h2 class="errorMsg"></h2>></h2><button id="rotate">Rotate Ship</button>')),"#shipType");let a='<div class="cell"></div>';for(let n=1;n<e.length;n++)a+='<div class="cell"></div>';var A;n(r("div","".concat(e.name),"".concat(a)),"#shipType"),A=e,document.querySelector(".gridify").addEventListener("mousedown",(e=>{const n=e.target.attributes[3].value[0],t=e.target.attributes[3].value[2];let r;r=document.querySelector(".".concat(A.name)).classList.contains("flip")?"y":"x","error"===g.players[0].gameboard.placeShip(A.name,n,t,r)?document.querySelector(".errorMsg").textContent="You Cannot place a ship there":i()})),function(e){document.querySelector("button").addEventListener("click",(()=>{!function(e){document.querySelector(".".concat(e)).classList.toggle("flip")}(e)}))}(e.name)}function n(e,n){document.querySelector(n).appendChild(e)}function r(e,n,t){const r=document.createElement(e);return r.classList.add(n),r.innerHTML=t,r}function o(e,n){const t=Math.floor(7*Math.random()),r=Math.floor(7*Math.random()),a=0===Math.floor(2*Math.random())?"x":"y";"error"===e.gameboard.placeShip("".concat(n),t,r,a)&&o(e,n)}const a={test:!0,addPlayer1Listener:()=>{const e=document.getElementById("player1");e.addEventListener("submit",(n=>{n.preventDefault();const t=new FormData(e).get("player");g.setPlayers(t),c(),i()}))},addAttackListener:()=>{document.querySelector(".computer").firstElementChild.addEventListener("mousedown",(e=>{if("false"===e.target.attributes[2].value){const n=e.target.attributes[3].value[0],t=e.target.attributes[3].value[2],r=g.players[0].attack(g.players[1],n,t);s("You shot and ".concat(r)),setTimeout((()=>{g.takeTurn(g.players[1])}),1500)}else s("You can't shoot the same location twice."),a.addAttackListener()}))}};function i(){0===g.players[0].gameboard.ships[0].locations.length?e(g.players[0].gameboard.ships[0]):0===g.players[0].gameboard.ships[1].locations.length?(A(),e(g.players[0].gameboard.ships[1])):0===g.players[0].gameboard.ships[2].locations.length?(A(),e(g.players[0].gameboard.ships[2])):0===g.players[0].gameboard.ships[3].locations.length?(A(),e(g.players[0].gameboard.ships[3])):0===g.players[0].gameboard.ships[4].locations.length?(A(),e(g.players[0].gameboard.ships[4])):(A(),g.startGame())}function A(){const e=document.querySelector("body"),n=document.querySelector(".moduleBackground");e.removeChild(n)}function c(){const e=document.querySelector(".container");for(;e.firstChild;)e.removeChild(e.firstElementChild)}function s(e){c(),function(e){const n=document.querySelector(".container"),t=d("h3","turnInfo","".concat(e));n.appendChild(t)}(e),l(g.players[1],g.players[1].humanOrComp),l(g.players[0],g.players[0].humanOrComp)}function l(e,n){const t=document.querySelector(".container"),r=d("div","".concat(n)," "),o=d("div","gridify"," ");r.appendChild(o),e.gameboard.gameboard.forEach((e=>{const t=d("div","row"," ");e.forEach((e=>{const r=d("div","".concat(n)," ");r.classList.add("cell");for(const n in e)r.setAttribute("".concat(n),"".concat(e[n]));t.appendChild(r)})),o.appendChild(t)})),r.appendChild(d("h4","boardTitle","This is ".concat(e.name,"'s board"))),t.appendChild(r)}function d(e,n,t){const r=document.createElement(e);return r.classList.add(n),r.innerHTML=t,r}function h(e,n){return{name:e,length:n,locations:[],numHits:0,placeShip(e,n,t){e=Number(e),n=Number(n),this.locations.push({x_axis:n,y_axis:e,hit:!1,cell:"".concat(e,"-").concat(n)});const r=function(){for(let t=1;t<this.length;t++){let r={x_axis:n+1*t,y_axis:e,hit:!1,cell:"".concat(e,"-").concat(n+1*t)};this.locations.push(r)}}.bind(this),o=function(){for(let t=1;t<this.length;t++){let r={x_axis:n,y_axis:e+1*t,hit:!1,cell:"".concat(e+1*t,"-").concat(n)};this.locations.push(r)}}.bind(this);return"x"===t?r():o(),this.locations},hit(e,n){this.locations.forEach((t=>{Number(t.x_axis)===Number(n)&&Number(t.y_axis)===Number(e)&&(t.hit=!0,this.numHits++)}))},isSunk(){return this.numHits===this.length}}}function u(){const e=[];for(let n=0;n<7;n++){const t=[];for(let e=0;e<7;e++){const r={boat:null,shotHere:!1,cell:"".concat(n,"-").concat(e)};t.push(r)}e.push(t)}return e}function C(e){let n;switch(e){case"carrier":n=0;break;case"battleship":n=1;break;case"cruiser":n=2;break;case"sub":n=3;break;case"patrolBoat":n=4;break;default:console.log("invalid boat name")}return n}function p(e){return{owner:e,gameboard:u(),ships:[new h("carrier",5),new h("battleship",4),new h("cruiser",3),new h("sub",3),new h("patrolBoat",2)],placeShip(e,n,t,r){const o=C(e);if("error"===function(e,n,t,r,o){let a=0;const i=new h("theTestBoat",o);if(i.placeShip(n,t,r),e.forEach((e=>{e.forEach((e=>{i.locations.forEach((n=>{n.cell===e.cell&&null===e.boat&&a++}))}))})),a!==o)return"error"}(this.gameboard,n,t,r,this.ships[o].length))return"error";const a=this.ships[o];a.placeShip(n,t,r),this.gameboard=function(e,n){let t=e;return n.locations.forEach((e=>{t[e.y_axis][e.x_axis].boat="".concat(n.name)})),t}(this.gameboard,a)},receiveAttack(e,n){if(this.gameboard[e][n].shotHere=!0,null===this.gameboard[e][n].boat)return"missed!";const t=C(this.gameboard[e][n].boat);return this.ships[t].hit(e,n),"hit a ".concat(this.gameboard[e][n].boat)},allSunk(){let e=0;return this.ships.forEach((n=>{n.isSunk()&&e++})),5===e}}}function m(e,n){return{humanOrComp:n,name:e,isActivePlayer:!1,gameboard:new p(e),attack:(e,n,t)=>e.gameboard.receiveAttack(n,t),randomMove(e){const n=[];e.gameboard.gameboard.forEach((e=>{e.forEach((e=>{!1===e.shotHere&&n.push(e)}))}));const t=Math.floor(Math.random()*n.length),r=n[t],o=r.cell[0],a=r.cell[2];return this.attack(e,o,a)}}}const f=(e,n)=>[new m(e,"human"),new m(n,"computer")],g={players:[],newGame(){this.players=[],function(){c();const e=document.querySelector(".container"),n=document.createElement("form");n.method="post",n.action="",n.id="player1";const t=document.createElement("div");t.classList.add("playerName"),t.innerHTML='<label for="player" placeholder="player" required>Player 1 Name:</label><input type="text" name="player" id="player" />',n.appendChild(t);const r=document.createElement("button");r.type="submit",r.innerHTML="Submit",n.appendChild(r),e.appendChild(n),a.addPlayer1Listener()}()},startGame(){s("Click a cell on the enemy Gameboard to attack!"),this.takeTurn(this.players[0])},setPlayers(e){const n=f(e,"The Enemy");this.players=n,this.players[1].gameboard.ships.forEach((e=>{o(this.players[1],e.name)}))},takeTurn(e){if("no winner"===this.checkForOtherPlayerWin(e))if("human"===e.humanOrComp)a.addAttackListener();else{const n=e.randomMove(this.players[0]);s("The enemy shot and ".concat(n)),this.takeTurn(this.players[0])}else s(this.checkForOtherPlayerWin(e)),function(){const e=document.querySelector(".turnInfo"),n=document.createElement("button");n.textContent="Yes!",n.addEventListener("click",(()=>{c(),g.newGame()})),e.appendChild(n)}()},checkForOtherPlayerWin(e){if(!0===e.gameboard.allSunk()){const n=0===this.players.indexOf(e)?this.players[1]:this.players[0];return"".concat(n.name," won the game! Would you like a rematch?")}return"no winner"}};var b=t(379),v=t.n(b),y=t(795),B=t.n(y),w=t(569),x=t.n(w),k=t(565),E=t.n(k),S=t(216),q=t.n(S),Y=t(589),F=t.n(Y),M=t(192),T={};T.styleTagTransform=F(),T.setAttributes=E(),T.insert=x().bind(null,"head"),T.domAPI=B(),T.insertStyleElement=q(),v()(M.Z,T),M.Z&&M.Z.locals&&M.Z.locals,g.newGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,