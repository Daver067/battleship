(()=>{"use strict";var n={192:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),i=t.n(r),o=t(645),a=t.n(o)()(i());a.push([n.id,".gridify{margin:auto;width:35vw;height:35vw;display:flex;flex-direction:column}.row{display:flex;width:100%;height:100%}.cell{width:100%;height:100%;border:1px solid #000}.cell:hover{background-color:bisque;cursor:pointer}.moduleBackground{position:absolute;top:0;left:0;width:100vw;height:100vh;background-color:#fff}.moduleBackground h1{color:#000;align-self:center;font-size:5rem;text-align:center;padding:.25em 0}.carrier{display:flex;height:5vw;width:25vw;background-color:gray;margin:auto}.battleship{display:flex;height:5vw;width:20vw;background-color:gray;margin:auto}.cruiser{display:flex;height:5vw;width:15vw;background-color:gray;margin:auto}.sub{display:flex;height:5vw;width:15vw;background-color:gray;margin:auto}.patrolBoat{display:flex;height:5vw;width:10vw;background-color:gray;margin:auto}.shipAndFlip{display:flex;flex-direction:column}.shipAndFlip h2{color:#000;align-self:center;font-size:3rem;text-align:center;padding:.5em 0 0 0}#rotate{height:5vw;padding:0 2em;align-self:center;font-size:1.25rem;margin:0 0 1em 0;border-radius:18px}*{box-sizing:border-box;margin:0;padding:0}h1{color:red}","",{version:3,sources:["webpack://./src/scss/_grid.scss","webpack://./src/scss/_variableAndFunctions.scss","webpack://./src/scss/_placeShips.scss","webpack://./src/style.scss"],names:[],mappings:"AAEA,SACE,WAAA,CACA,UAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CAEF,KACE,YAAA,CACA,UAAA,CACA,WAAA,CAGF,MACE,UAAA,CACA,WAAA,CACA,qBCXY,CDYZ,YACE,uBAAA,CACA,cAAA,CEnBJ,kBAEE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CACA,qBACE,UAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,eAAA,CAIJ,SACE,YAAA,CACA,UAAA,CACA,UAAA,CACA,qBAAA,CACA,WAAA,CAEF,YACE,YAAA,CACA,UAAA,CACA,UAAA,CACA,qBAAA,CACA,WAAA,CAEF,SACE,YAAA,CACA,UAAA,CACA,UAAA,CACA,qBAAA,CACA,WAAA,CAEF,KACE,YAAA,CACA,UAAA,CACA,UAAA,CACA,qBAAA,CACA,WAAA,CAEF,YACE,YAAA,CACA,UAAA,CACA,UAAA,CACA,qBAAA,CACA,WAAA,CAGF,aACE,YAAA,CACA,qBAAA,CACA,gBACE,UAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,kBAAA,CAIJ,QACE,UAAA,CACA,aAAA,CACA,iBAAA,CACA,iBAAA,CACA,gBAAA,CACA,kBAAA,CCtEF,EACE,qBAAA,CACA,QAAA,CACA,SAAA,CAGF,GACE,SAAA",sourcesContent:['@import "../scss/variableAndFunctions";\n\n.gridify {\n  margin: auto;\n  width: 35vw;\n  height: 35vw;\n  display: flex;\n  flex-direction: column;\n}\n.row {\n  display: flex;\n  width: 100%;\n  height: 100%;\n}\n\n.cell {\n  width: 100%;\n  height: 100%;\n  border: $test-border;\n  &:hover {\n    background-color: bisque;\n    cursor: pointer;\n  }\n}\n','@mixin flexCenter($direction) {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: $direction;\n}\n\n$test-border: 1px solid black;\n\n$font-weights: (\n  "light": 300,\n  "regular": 400,\n  "medium": 500,\n  "bold": 700,\n);\n\n@function weight($weight-name) {\n  @return map-get($map: $font-weights, $key: $weight-name);\n}\n','@import "../scss/variableAndFunctions";\n\n.moduleBackground {\n  // @include flexCenter(row);\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(255, 255, 255, 1);\n  h1 {\n    color: black;\n    align-self: center;\n    font-size: 5rem;\n    text-align: center;\n    padding: 0.25em 0;\n  }\n}\n\n.carrier {\n  display: flex;\n  height: 5vw;\n  width: 25vw;\n  background-color: grey;\n  margin: auto;\n}\n.battleship {\n  display: flex;\n  height: 5vw;\n  width: 20vw;\n  background-color: grey;\n  margin: auto;\n}\n.cruiser {\n  display: flex;\n  height: 5vw;\n  width: 15vw;\n  background-color: grey;\n  margin: auto;\n}\n.sub {\n  display: flex;\n  height: 5vw;\n  width: 15vw;\n  background-color: grey;\n  margin: auto;\n}\n.patrolBoat {\n  display: flex;\n  height: 5vw;\n  width: 10vw;\n  background-color: grey;\n  margin: auto;\n}\n\n.shipAndFlip {\n  display: flex;\n  flex-direction: column;\n  h2 {\n    color: black;\n    align-self: center;\n    font-size: 3rem;\n    text-align: center;\n    padding: 0.5em 0 0 0;\n  }\n}\n\n#rotate {\n  height: 5vw;\n  padding: 0 2em;\n  align-self: center;\n  font-size: 1.25rem;\n  margin: 0 0 1em 0;\n  border-radius: 18px;\n}\n','@import "./scss/grid.scss";\n@import "./scss/placeShips";\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nh1 {\n  color: red;\n}\n'],sourceRoot:""}]);const c=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,i,o){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);r&&a[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},a=[],c=0;c<n.length;c++){var s=n[c],A=r.base?s[0]+r.base:s[0],l=o[A]||0,d="".concat(A," ").concat(l);o[A]=l+1;var u=t(d),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)e[u].references++,e[u].updater(h);else{var p=i(h,r);r.byIndex=c,e.splice(c,0,{identifier:d,updater:p,references:1})}a.push(d)}return a}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var o=r(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var c=t(o[a]);e[c].references--}for(var s=r(n,i),A=0;A<o.length;A++){var l=t(o[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=s}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{function n(n,e){return{name:n,length:e,locations:[],numHits:0,placeShip(n,e,t){this.locations.push({x_axis:e,y_axis:n,hit:!1,cell:"".concat(n,"-").concat(e)});const r=function(){for(let t=1;t<this.length;t++){let r={x_axis:e+1*t,y_axis:n,hit:!1,cell:"".concat(n,"-").concat(e+1*t)};this.locations.push(r)}}.bind(this),i=function(){for(let t=1;t<this.length;t++){let r={x_axis:e,y_axis:n+1*t,hit:!1,cell:"".concat(n+1*t,"-").concat(e)};this.locations.push(r)}}.bind(this);return"x"===t?r():i(),this.locations},hit(n,e){this.locations.forEach((t=>{t.x_axis===e&&t.y_axis===n&&(t.hit=!0,this.numHits++)}))},isSunk(){return this.numHits===this.length}}}function e(){const n=[];for(let e=0;e<7;e++){const t=[];for(let n=0;n<7;n++){const r={boat:null,shotHere:!1,cell:"".concat(e,"-").concat(n)};t.push(r)}n.push(t)}return n}function r(n){let e;switch(n){case"carrier":e=0;break;case"battleship":e=1;break;case"cruiser":e=2;break;case"sub":e=3;break;case"patrolBoat":e=4;break;default:console.log("invalid boat name")}return e}function i(t){return{owner:t,gameboard:e(),ships:[new n("carrier",5),new n("battleship",4),new n("cruiser",3),new n("sub",3),new n("patrolBoat",2)],placeShip(e,t,i,o){const a=r(e);if("error"===function(e,t,r,i,o){let a=0;const c=new n("theTestBoat",o);if(c.placeShip(t,r,i),e.forEach((n=>{n.forEach((n=>{c.locations.forEach((e=>{e.cell===n.cell&&null===n.boat&&a++}))}))})),a!==o)return"error"}(this.gameboard,t,i,o,this.ships[a].length))return"error";const c=this.ships[a];c.placeShip(t,i,o),this.gameboard=function(n,e){let t=n;return e.locations.forEach((n=>{t[n.y_axis][n.x_axis].boat="".concat(e.name)})),t}(this.gameboard,c)},receiveAttack(n,e){if(null===this.gameboard[n][e].boat)return this.gameboard[n][e].shotHere=!0,"miss";const t=r(this.gameboard[n][e].boat);return this.ships[t].hit(n,e),"".concat(this.gameboard[n][e].boat," was hit!")},allSunk(){let n=0;return this.ships.forEach((e=>{e.isSunk()&&n++})),5===n}}}function o(n,e){return{humanOrComp:e,name:n,isActivePlayer:!1,gameboard:new i(n),attack(n,e,t){n.gameboard.receiveAttack(e,t)},beginTurn(){this.isActivePlayer=!0},endTurn(){this.isActivePlayer=!1}}}const a=(n,e)=>[new o(n,"human"),new o(e,"computer")],c={players:[],setPlayers(n){const e=a(n,"compy");this.players=e}};function s(n,e){document.querySelector(e).appendChild(n)}function A(n,e,t){const r=document.createElement(n);return r.classList.add(e),r.innerHTML=t,r}var l=t(379),d=t.n(l),u=t(795),h=t.n(u),p=t(569),C=t.n(p),f=t(565),g=t.n(f),m=t(216),v=t.n(m),b=t(589),y=t.n(b),w=t(192),x={};x.styleTagTransform=y(),x.setAttributes=g(),x.insert=C().bind(null,"head"),x.domAPI=h(),x.insertStyleElement=v(),d()(w.Z,x),w.Z&&w.Z.locals&&w.Z.locals,(()=>{const n=document.getElementById("player1");n.addEventListener("submit",(e=>{e.preventDefault();const t=new FormData(n).get("player");c.setPlayers(t),function(){const n=document.querySelector(".container");for(;n.firstChild;)n.removeChild(n.firstElementChild)}(),function(n){const e=document.querySelector("body"),t=A("div","moduleBackground","   <h1>Place Your Ships!</h1><div id=\"playerBoard\"></div><div id='shipType'><h2 id='placeYourThisShip'></div></div>");e.appendChild(t),s(function(n){const e=A("div","human"," "),t=A("div","gridify"," ");return e.appendChild(t),n.gameboard.gameboard.forEach((n=>{const e=A("div","row"," ");n.forEach((n=>{const t=A("div","human"," ");t.classList.add("cell");for(const e in n)t.setAttribute("".concat(e),"".concat(n[e]));e.appendChild(t)})),t.appendChild(e)})),e}(c.players[0]),"#playerBoard"),s(A("div","shipAndFlip","<h2>place your ".concat(n.name,'</h2><button id="rotate">Rotate Ship</button>')),"#shipType");let r='<div class="cell"></div>';for(let e=1;e<n.length;e++)r+='<div class="cell"></div>';s(A("div","".concat(n.name),"".concat(r)),"#shipType")}(c.players[0].gameboard.ships[3])}))})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dU0sRUFBWXpNLE9BQVFFLElBQ3RDaU4sR0FBd0IsMkJBRTFCN0IsRUFDRUcsRUFBaUIsTUFBRCxVQUFXZ0IsRUFBWTNGLE1BQXZCLFVBQWtDcUcsSUFDbEQsWUFFSCxDRWRLQyxDQUFpQmxDLEVBQVNDLFFBQVEsR0FBR2hELFVBQVVhLE1BQU0sR0FBckQsR0FQRixFQ0pKcUUsRSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc2NyaXB0cy9zaGlwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc2NyaXB0cy9nYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zY3JpcHRzL3BsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3NjcmlwdHMvZ2FtZUxvb3AuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zY3JpcHRzL3BsYWNlU2hpcHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZS5zY3NzPzc1YmEiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zY3JpcHRzL2RvbVN0dWZmLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuZ3JpZGlmeXttYXJnaW46YXV0bzt3aWR0aDozNXZ3O2hlaWdodDozNXZ3O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW59LnJvd3tkaXNwbGF5OmZsZXg7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0uY2VsbHt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JvcmRlcjoxcHggc29saWQgIzAwMH0uY2VsbDpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOmJpc3F1ZTtjdXJzb3I6cG9pbnRlcn0ubW9kdWxlQmFja2dyb3VuZHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7d2lkdGg6MTAwdnc7aGVpZ2h0OjEwMHZoO2JhY2tncm91bmQtY29sb3I6I2ZmZn0ubW9kdWxlQmFja2dyb3VuZCBoMXtjb2xvcjojMDAwO2FsaWduLXNlbGY6Y2VudGVyO2ZvbnQtc2l6ZTo1cmVtO3RleHQtYWxpZ246Y2VudGVyO3BhZGRpbmc6LjI1ZW0gMH0uY2FycmllcntkaXNwbGF5OmZsZXg7aGVpZ2h0OjV2dzt3aWR0aDoyNXZ3O2JhY2tncm91bmQtY29sb3I6Z3JheTttYXJnaW46YXV0b30uYmF0dGxlc2hpcHtkaXNwbGF5OmZsZXg7aGVpZ2h0OjV2dzt3aWR0aDoyMHZ3O2JhY2tncm91bmQtY29sb3I6Z3JheTttYXJnaW46YXV0b30uY3J1aXNlcntkaXNwbGF5OmZsZXg7aGVpZ2h0OjV2dzt3aWR0aDoxNXZ3O2JhY2tncm91bmQtY29sb3I6Z3JheTttYXJnaW46YXV0b30uc3Vie2Rpc3BsYXk6ZmxleDtoZWlnaHQ6NXZ3O3dpZHRoOjE1dnc7YmFja2dyb3VuZC1jb2xvcjpncmF5O21hcmdpbjphdXRvfS5wYXRyb2xCb2F0e2Rpc3BsYXk6ZmxleDtoZWlnaHQ6NXZ3O3dpZHRoOjEwdnc7YmFja2dyb3VuZC1jb2xvcjpncmF5O21hcmdpbjphdXRvfS5zaGlwQW5kRmxpcHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5zaGlwQW5kRmxpcCBoMntjb2xvcjojMDAwO2FsaWduLXNlbGY6Y2VudGVyO2ZvbnQtc2l6ZTozcmVtO3RleHQtYWxpZ246Y2VudGVyO3BhZGRpbmc6LjVlbSAwIDAgMH0jcm90YXRle2hlaWdodDo1dnc7cGFkZGluZzowIDJlbTthbGlnbi1zZWxmOmNlbnRlcjtmb250LXNpemU6MS4yNXJlbTttYXJnaW46MCAwIDFlbSAwO2JvcmRlci1yYWRpdXM6MThweH0qe2JveC1zaXppbmc6Ym9yZGVyLWJveDttYXJnaW46MDtwYWRkaW5nOjB9aDF7Y29sb3I6cmVkfVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zY3NzL19ncmlkLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zY3NzL192YXJpYWJsZUFuZEZ1bmN0aW9ucy5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc2Nzcy9fcGxhY2VTaGlwcy5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQSxTQUNFLFdBQUEsQ0FDQSxVQUFBLENBQ0EsV0FBQSxDQUNBLFlBQUEsQ0FDQSxxQkFBQSxDQUVGLEtBQ0UsWUFBQSxDQUNBLFVBQUEsQ0FDQSxXQUFBLENBR0YsTUFDRSxVQUFBLENBQ0EsV0FBQSxDQUNBLHFCQ1hZLENEWVosWUFDRSx1QkFBQSxDQUNBLGNBQUEsQ0VuQkosa0JBRUUsaUJBQUEsQ0FDQSxLQUFBLENBQ0EsTUFBQSxDQUNBLFdBQUEsQ0FDQSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxxQkFDRSxVQUFBLENBQ0EsaUJBQUEsQ0FDQSxjQUFBLENBQ0EsaUJBQUEsQ0FDQSxlQUFBLENBSUosU0FDRSxZQUFBLENBQ0EsVUFBQSxDQUNBLFVBQUEsQ0FDQSxxQkFBQSxDQUNBLFdBQUEsQ0FFRixZQUNFLFlBQUEsQ0FDQSxVQUFBLENBQ0EsVUFBQSxDQUNBLHFCQUFBLENBQ0EsV0FBQSxDQUVGLFNBQ0UsWUFBQSxDQUNBLFVBQUEsQ0FDQSxVQUFBLENBQ0EscUJBQUEsQ0FDQSxXQUFBLENBRUYsS0FDRSxZQUFBLENBQ0EsVUFBQSxDQUNBLFVBQUEsQ0FDQSxxQkFBQSxDQUNBLFdBQUEsQ0FFRixZQUNFLFlBQUEsQ0FDQSxVQUFBLENBQ0EsVUFBQSxDQUNBLHFCQUFBLENBQ0EsV0FBQSxDQUdGLGFBQ0UsWUFBQSxDQUNBLHFCQUFBLENBQ0EsZ0JBQ0UsVUFBQSxDQUNBLGlCQUFBLENBQ0EsY0FBQSxDQUNBLGlCQUFBLENBQ0Esa0JBQUEsQ0FJSixRQUNFLFVBQUEsQ0FDQSxhQUFBLENBQ0EsaUJBQUEsQ0FDQSxpQkFBQSxDQUNBLGdCQUFBLENBQ0Esa0JBQUEsQ0N0RUYsRUFDRSxxQkFBQSxDQUNBLFFBQUEsQ0FDQSxTQUFBLENBR0YsR0FDRSxTQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uL3Njc3MvdmFyaWFibGVBbmRGdW5jdGlvbnNcXFwiO1xcblxcbi5ncmlkaWZ5IHtcXG4gIG1hcmdpbjogYXV0bztcXG4gIHdpZHRoOiAzNXZ3O1xcbiAgaGVpZ2h0OiAzNXZ3O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcbi5yb3cge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG4uY2VsbCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJvcmRlcjogJHRlc3QtYm9yZGVyO1xcbiAgJjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGJpc3F1ZTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgfVxcbn1cXG5cIixcIkBtaXhpbiBmbGV4Q2VudGVyKCRkaXJlY3Rpb24pIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBmbGV4LWRpcmVjdGlvbjogJGRpcmVjdGlvbjtcXG59XFxuXFxuJHRlc3QtYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuXFxuJGZvbnQtd2VpZ2h0czogKFxcbiAgXFxcImxpZ2h0XFxcIjogMzAwLFxcbiAgXFxcInJlZ3VsYXJcXFwiOiA0MDAsXFxuICBcXFwibWVkaXVtXFxcIjogNTAwLFxcbiAgXFxcImJvbGRcXFwiOiA3MDAsXFxuKTtcXG5cXG5AZnVuY3Rpb24gd2VpZ2h0KCR3ZWlnaHQtbmFtZSkge1xcbiAgQHJldHVybiBtYXAtZ2V0KCRtYXA6ICRmb250LXdlaWdodHMsICRrZXk6ICR3ZWlnaHQtbmFtZSk7XFxufVxcblwiLFwiQGltcG9ydCBcXFwiLi4vc2Nzcy92YXJpYWJsZUFuZEZ1bmN0aW9uc1xcXCI7XFxuXFxuLm1vZHVsZUJhY2tncm91bmQge1xcbiAgLy8gQGluY2x1ZGUgZmxleENlbnRlcihyb3cpO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHdpZHRoOiAxMDB2dztcXG4gIGhlaWdodDogMTAwdmg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDEpO1xcbiAgaDEge1xcbiAgICBjb2xvcjogYmxhY2s7XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcXG4gICAgZm9udC1zaXplOiA1cmVtO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIHBhZGRpbmc6IDAuMjVlbSAwO1xcbiAgfVxcbn1cXG5cXG4uY2FycmllciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgaGVpZ2h0OiA1dnc7XFxuICB3aWR0aDogMjV2dztcXG4gIGJhY2tncm91bmQtY29sb3I6IGdyZXk7XFxuICBtYXJnaW46IGF1dG87XFxufVxcbi5iYXR0bGVzaGlwIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBoZWlnaHQ6IDV2dztcXG4gIHdpZHRoOiAyMHZ3O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogZ3JleTtcXG4gIG1hcmdpbjogYXV0bztcXG59XFxuLmNydWlzZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogNXZ3O1xcbiAgd2lkdGg6IDE1dnc7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBncmV5O1xcbiAgbWFyZ2luOiBhdXRvO1xcbn1cXG4uc3ViIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBoZWlnaHQ6IDV2dztcXG4gIHdpZHRoOiAxNXZ3O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogZ3JleTtcXG4gIG1hcmdpbjogYXV0bztcXG59XFxuLnBhdHJvbEJvYXQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogNXZ3O1xcbiAgd2lkdGg6IDEwdnc7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBncmV5O1xcbiAgbWFyZ2luOiBhdXRvO1xcbn1cXG5cXG4uc2hpcEFuZEZsaXAge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBoMiB7XFxuICAgIGNvbG9yOiBibGFjaztcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgICBmb250LXNpemU6IDNyZW07XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgcGFkZGluZzogMC41ZW0gMCAwIDA7XFxuICB9XFxufVxcblxcbiNyb3RhdGUge1xcbiAgaGVpZ2h0OiA1dnc7XFxuICBwYWRkaW5nOiAwIDJlbTtcXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG4gIG1hcmdpbjogMCAwIDFlbSAwO1xcbiAgYm9yZGVyLXJhZGl1czogMThweDtcXG59XFxuXCIsXCJAaW1wb3J0IFxcXCIuL3Njc3MvZ3JpZC5zY3NzXFxcIjtcXG5AaW1wb3J0IFxcXCIuL3Njc3MvcGxhY2VTaGlwc1xcXCI7XFxuXFxuKiB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG59XFxuXFxuaDEge1xcbiAgY29sb3I6IHJlZDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJmdW5jdGlvbiBTaGlwKG5hbWUsIGxlbmd0aCkge1xuICByZXR1cm4ge1xuICAgIG5hbWUsXG4gICAgbGVuZ3RoLFxuICAgIGxvY2F0aW9uczogW10sXG4gICAgbnVtSGl0czogMCxcblxuICAgIHBsYWNlU2hpcChzdGFydGluZ0NlbGx5LCBzdGFydGluZ0NlbGx4LCBheGlzKSB7XG4gICAgICB0aGlzLmxvY2F0aW9ucy5wdXNoKHtcbiAgICAgICAgeF9heGlzOiBzdGFydGluZ0NlbGx4LFxuICAgICAgICB5X2F4aXM6IHN0YXJ0aW5nQ2VsbHksXG4gICAgICAgIGhpdDogZmFsc2UsXG4gICAgICAgIGNlbGw6IGAke3N0YXJ0aW5nQ2VsbHl9LSR7c3RhcnRpbmdDZWxseH1gLFxuICAgICAgfSk7XG4gICAgICBmdW5jdGlvbiBpbmNyZWFzZVhBeGlzKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsZXQgbmV3TG9jYXRpb24gPSB7XG4gICAgICAgICAgICB4X2F4aXM6IHN0YXJ0aW5nQ2VsbHggKyAxICogaSxcbiAgICAgICAgICAgIHlfYXhpczogc3RhcnRpbmdDZWxseSxcbiAgICAgICAgICAgIGhpdDogZmFsc2UsXG4gICAgICAgICAgICBjZWxsOiBgJHtzdGFydGluZ0NlbGx5fS0ke3N0YXJ0aW5nQ2VsbHggKyAxICogaX1gLFxuICAgICAgICAgIH07XG4gICAgICAgICAgdGhpcy5sb2NhdGlvbnMucHVzaChuZXdMb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGluY3JlYXNlWUF4aXMoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxldCBuZXdMb2NhdGlvbiA9IHtcbiAgICAgICAgICAgIHhfYXhpczogc3RhcnRpbmdDZWxseCxcbiAgICAgICAgICAgIHlfYXhpczogc3RhcnRpbmdDZWxseSArIDEgKiBpLFxuICAgICAgICAgICAgaGl0OiBmYWxzZSxcbiAgICAgICAgICAgIGNlbGw6IGAke3N0YXJ0aW5nQ2VsbHkgKyAxICogaX0tJHtzdGFydGluZ0NlbGx4fWAsXG4gICAgICAgICAgfTtcbiAgICAgICAgICB0aGlzLmxvY2F0aW9ucy5wdXNoKG5ld0xvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgYm91bmRpbmNyZWFzZVhBeGlzID0gaW5jcmVhc2VYQXhpcy5iaW5kKHRoaXMpO1xuICAgICAgY29uc3QgYm91bmRpbmNyZWFzZVlBeGlzID0gaW5jcmVhc2VZQXhpcy5iaW5kKHRoaXMpO1xuICAgICAgYXhpcyA9PT0gXCJ4XCIgPyBib3VuZGluY3JlYXNlWEF4aXMoKSA6IGJvdW5kaW5jcmVhc2VZQXhpcygpO1xuXG4gICAgICByZXR1cm4gdGhpcy5sb2NhdGlvbnM7XG4gICAgfSxcblxuICAgIGhpdChjZWxsSGl0WSwgY2VsbEhpdFgpIHtcbiAgICAgIHRoaXMubG9jYXRpb25zLmZvckVhY2goKGxvY2F0aW9uKSA9PiB7XG4gICAgICAgIGlmIChsb2NhdGlvbi54X2F4aXMgPT09IGNlbGxIaXRYICYmIGxvY2F0aW9uLnlfYXhpcyA9PT0gY2VsbEhpdFkpIHtcbiAgICAgICAgICBsb2NhdGlvbi5oaXQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMubnVtSGl0cysrO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgaXNTdW5rKCkge1xuICAgICAgcmV0dXJuIHRoaXMubnVtSGl0cyA9PT0gdGhpcy5sZW5ndGg7XG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IHsgU2hpcCB9O1xuIiwiaW1wb3J0IHsgU2hpcCB9IGZyb20gXCIuL3NoaXBcIjtcblxuLy8gYnVpbGRzIHRoZSBnYW1lYm9hcmQgaW5zaWRlIHRoZSBnYW1lYm9hcmQgZnVuY3Rpb25cbmZ1bmN0aW9uIGJ1aWxkR2FtZWJvYXJkKCkge1xuICBjb25zdCBnYW1lYm9hcmQgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICBjb25zdCBib2FyZFJvdyA9IFtdO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgNzsgaisrKSB7XG4gICAgICBjb25zdCB0aGlzQm9hcmRDZWxsID0geyBib2F0OiBudWxsLCBzaG90SGVyZTogZmFsc2UsIGNlbGw6IGAke2l9LSR7an1gIH07XG4gICAgICBib2FyZFJvdy5wdXNoKHRoaXNCb2FyZENlbGwpO1xuICAgIH1cbiAgICBnYW1lYm9hcmQucHVzaChib2FyZFJvdyk7XG4gIH1cbiAgcmV0dXJuIGdhbWVib2FyZDtcbn1cblxuLy8gY2hlY2tzIHRoZSBpbnB1dCBmb3Igc2hpcCB0eXBlIGFuZCBjaGFuZ2VzIGl0IHRvIHRoZSBwcm9wZXIgaW5kZXggbnVtYmVyXG5mdW5jdGlvbiBnZXRTaGlwSW5kZXgoc2hpcE5hbWUpIHtcbiAgbGV0IHNoaXBJbmRleDtcbiAgc3dpdGNoIChzaGlwTmFtZSkge1xuICAgIGNhc2UgXCJjYXJyaWVyXCI6XG4gICAgICBzaGlwSW5kZXggPSAwO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImJhdHRsZXNoaXBcIjpcbiAgICAgIHNoaXBJbmRleCA9IDE7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY3J1aXNlclwiOlxuICAgICAgc2hpcEluZGV4ID0gMjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzdWJcIjpcbiAgICAgIHNoaXBJbmRleCA9IDM7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwicGF0cm9sQm9hdFwiOlxuICAgICAgc2hpcEluZGV4ID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBjb25zb2xlLmxvZyhcImludmFsaWQgYm9hdCBuYW1lXCIpO1xuICB9XG4gIHJldHVybiBzaGlwSW5kZXg7XG59XG5cbi8vIGR1cmluZyBwbGFjZSBzaGlwIGluIGdhbWVib2FyZCB0aGlzIGZ1bmN0aW9uIHVwZGF0ZXMgdGhlIGdhbWVib2FyZCB3aXRoIHRoZSBzaGlwIGxvY2F0aW9uXG5mdW5jdGlvbiB1cGRhdGVHYW1lYm9hcmRXaXRoTmV3U2hpcExvY2F0aW9uKHRoaXNHYW1lYm9hcmQsIHNoaXApIHtcbiAgbGV0IHJldHVybkdhbWVib2FyZCA9IHRoaXNHYW1lYm9hcmQ7XG4gIHNoaXAubG9jYXRpb25zLmZvckVhY2goKGxvY2F0aW9uKSA9PiB7XG4gICAgcmV0dXJuR2FtZWJvYXJkW2xvY2F0aW9uLnlfYXhpc11bbG9jYXRpb24ueF9heGlzXS5ib2F0ID0gYCR7c2hpcC5uYW1lfWA7XG4gIH0pO1xuICByZXR1cm4gcmV0dXJuR2FtZWJvYXJkO1xufVxuXG4vLyB0aGlzIGZ1bmN0aW9uIHJ1bnMgdGhyb3VnaCBhbGwgY2VsbHMgaW4gZ2FtZWJvYXJkIGFuZCBlbnN1cmVzIHRoZSBsb2NhdGlvbiB0aGUgc2hpcCBpcyBpbiBpcyBhIHZhbGlkIGxvY2F0aW9uXG5mdW5jdGlvbiBjaGVja1ZhbGlkU2hpcExvY2F0aW9uKFxuICBjdXJyZW50R2FtZWJvYXJkLFxuICBuZXdTaGlwU3RhcnRpbmd5LFxuICBuZXdTaGlwU3RhcnRpbmd4LFxuICBheGlzLFxuICBuZXdTaGlwU2l6ZVxuKSB7XG4gIGxldCB2YWxpZExvY2F0aW9uID0gMDtcbiAgY29uc3QgbmV3U2hpcCA9IG5ldyBTaGlwKFwidGhlVGVzdEJvYXRcIiwgbmV3U2hpcFNpemUpO1xuICBuZXdTaGlwLnBsYWNlU2hpcChuZXdTaGlwU3RhcnRpbmd5LCBuZXdTaGlwU3RhcnRpbmd4LCBheGlzKTtcbiAgY3VycmVudEdhbWVib2FyZC5mb3JFYWNoKChyb3cpID0+IHtcbiAgICByb3cuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgbmV3U2hpcC5sb2NhdGlvbnMuZm9yRWFjaCgoc2hpcExvY2F0aW9uKSA9PiB7XG4gICAgICAgIGlmIChzaGlwTG9jYXRpb24uY2VsbCA9PT0gY2VsbC5jZWxsICYmIGNlbGwuYm9hdCA9PT0gbnVsbCkge1xuICAgICAgICAgIHZhbGlkTG9jYXRpb24rKztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuICBpZiAodmFsaWRMb2NhdGlvbiAhPT0gbmV3U2hpcFNpemUpIHtcbiAgICByZXR1cm4gXCJlcnJvclwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIEdhbWVib2FyZChvd25lcikge1xuICByZXR1cm4ge1xuICAgIG93bmVyLFxuICAgIGdhbWVib2FyZDogYnVpbGRHYW1lYm9hcmQoKSxcbiAgICBzaGlwczogW1xuICAgICAgbmV3IFNoaXAoXCJjYXJyaWVyXCIsIDUpLFxuICAgICAgbmV3IFNoaXAoXCJiYXR0bGVzaGlwXCIsIDQpLFxuICAgICAgbmV3IFNoaXAoXCJjcnVpc2VyXCIsIDMpLFxuICAgICAgbmV3IFNoaXAoXCJzdWJcIiwgMyksXG4gICAgICBuZXcgU2hpcChcInBhdHJvbEJvYXRcIiwgMiksXG4gICAgXSxcbiAgICBwbGFjZVNoaXAoc2hpcE5hbWUsIHN0YXJ0aW5neSwgc3RhcnRpbmd4LCBheGlzKSB7XG4gICAgICBjb25zdCBzaGlwSW5kZXggPSBnZXRTaGlwSW5kZXgoc2hpcE5hbWUpO1xuICAgICAgaWYgKFxuICAgICAgICBjaGVja1ZhbGlkU2hpcExvY2F0aW9uKFxuICAgICAgICAgIHRoaXMuZ2FtZWJvYXJkLFxuICAgICAgICAgIHN0YXJ0aW5neSxcbiAgICAgICAgICBzdGFydGluZ3gsXG4gICAgICAgICAgYXhpcyxcbiAgICAgICAgICB0aGlzLnNoaXBzW3NoaXBJbmRleF0ubGVuZ3RoXG4gICAgICAgICkgPT09IFwiZXJyb3JcIlxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBcImVycm9yXCI7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNoaXAgPSB0aGlzLnNoaXBzW3NoaXBJbmRleF07XG4gICAgICBzaGlwLnBsYWNlU2hpcChzdGFydGluZ3ksIHN0YXJ0aW5neCwgYXhpcyk7XG4gICAgICB0aGlzLmdhbWVib2FyZCA9IHVwZGF0ZUdhbWVib2FyZFdpdGhOZXdTaGlwTG9jYXRpb24odGhpcy5nYW1lYm9hcmQsIHNoaXApO1xuICAgIH0sXG4gICAgcmVjZWl2ZUF0dGFjayh5QXhpcywgeEF4aXMpIHtcbiAgICAgIGlmICh0aGlzLmdhbWVib2FyZFt5QXhpc11beEF4aXNdLmJvYXQgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5nYW1lYm9hcmRbeUF4aXNdW3hBeGlzXS5zaG90SGVyZSA9IHRydWU7XG4gICAgICAgIHJldHVybiBcIm1pc3NcIjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGJvYXRJbmRleCA9IGdldFNoaXBJbmRleCh0aGlzLmdhbWVib2FyZFt5QXhpc11beEF4aXNdLmJvYXQpO1xuICAgICAgdGhpcy5zaGlwc1tib2F0SW5kZXhdLmhpdCh5QXhpcywgeEF4aXMpO1xuICAgICAgcmV0dXJuIGAke3RoaXMuZ2FtZWJvYXJkW3lBeGlzXVt4QXhpc10uYm9hdH0gd2FzIGhpdCFgO1xuICAgIH0sXG4gICAgYWxsU3VuaygpIHtcbiAgICAgIGxldCBudW1iZXJTdW5rID0gMDtcbiAgICAgIHRoaXMuc2hpcHMuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgICBpZiAoc2hpcC5pc1N1bmsoKSkge1xuICAgICAgICAgIG51bWJlclN1bmsrKztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbnVtYmVyU3VuayA9PT0gNTtcbiAgICB9LFxuICB9O1xufVxuZXhwb3J0IHsgR2FtZWJvYXJkIH07XG4iLCJpbXBvcnQgeyBHYW1lYm9hcmQgfSBmcm9tIFwiLi9nYW1lYm9hcmRcIjtcblxuZnVuY3Rpb24gUGxheWVyKG5hbWUsIGh1bWFuT3JDb21wKSB7XG4gIHJldHVybiB7XG4gICAgaHVtYW5PckNvbXAsXG4gICAgbmFtZSxcbiAgICBpc0FjdGl2ZVBsYXllcjogZmFsc2UsXG4gICAgZ2FtZWJvYXJkOiBuZXcgR2FtZWJvYXJkKG5hbWUpLFxuICAgIGF0dGFjayhlbmVteSwgYXR0YWNrWUF4aXMsIGF0dGFja1hheGlzKSB7XG4gICAgICBlbmVteS5nYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhhdHRhY2tZQXhpcywgYXR0YWNrWGF4aXMpO1xuICAgIH0sXG4gICAgYmVnaW5UdXJuKCkge1xuICAgICAgdGhpcy5pc0FjdGl2ZVBsYXllciA9IHRydWU7XG4gICAgfSxcbiAgICBlbmRUdXJuKCkge1xuICAgICAgdGhpcy5pc0FjdGl2ZVBsYXllciA9IGZhbHNlO1xuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCB7IFBsYXllciB9O1xuIiwiaW1wb3J0IHsgUGxheWVyIH0gZnJvbSBcIi4vcGxheWVyXCI7XG5cbmNvbnN0IEhlbHBlckZ1bmN0aW9ucyA9IHtcbiAgY3JlYXRlUGxheWVycyhwbGF5ZXIxTmFtZSwgcGxheWVyMk5hbWUpIHtcbiAgICBjb25zdCBwbGF5ZXIxID0gbmV3IFBsYXllcihwbGF5ZXIxTmFtZSwgXCJodW1hblwiKTtcbiAgICBjb25zdCBwbGF5ZXIyID0gbmV3IFBsYXllcihwbGF5ZXIyTmFtZSwgXCJjb21wdXRlclwiKTtcbiAgICBjb25zdCBwbGF5ZXJzID0gW3BsYXllcjEsIHBsYXllcjJdO1xuICAgIHJldHVybiBwbGF5ZXJzO1xuICB9LFxufTtcblxuY29uc3QgR2FtZUxvb3AgPSB7XG4gIHBsYXllcnM6IFtdLFxuXG4gIHNldFBsYXllcnMocGxheWVyMU5hbWUpIHtcbiAgICBjb25zdCBuZXdQbGF5ZXJzID0gSGVscGVyRnVuY3Rpb25zLmNyZWF0ZVBsYXllcnMocGxheWVyMU5hbWUsIFwiY29tcHlcIik7XG4gICAgdGhpcy5wbGF5ZXJzID0gbmV3UGxheWVycztcbiAgfSxcbn07XG5cbmV4cG9ydCB7IEdhbWVMb29wIH07XG4iLCJpbXBvcnQgeyBHYW1lTG9vcCB9IGZyb20gXCIuL2dhbWVMb29wXCI7XG5cbi8vIG1ha2VzIHRoZSBtb2R1bGUgZm9yIHBsYWNpbmcgc2hpcHNcbmZ1bmN0aW9uIHJlbmRlclNoaXBNb2R1bGUoc2hpcFRvUGxhY2UpIHtcbiAgY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpO1xuICBjb25zdCBtb2R1bGVCYWNrZ3JvdW5kID0gY3JlYXRlTmV3RWxlbWVudChcbiAgICBcImRpdlwiLFxuICAgIFwibW9kdWxlQmFja2dyb3VuZFwiLFxuICAgIGAgICA8aDE+UGxhY2UgWW91ciBTaGlwcyE8L2gxPjxkaXYgaWQ9XCJwbGF5ZXJCb2FyZFwiPjwvZGl2PjxkaXYgaWQ9J3NoaXBUeXBlJz48aDIgaWQ9J3BsYWNlWW91clRoaXNTaGlwJz48L2Rpdj48L2Rpdj5gXG4gICk7XG4gIGJvZHkuYXBwZW5kQ2hpbGQobW9kdWxlQmFja2dyb3VuZCk7XG4gIHJlbmRlck9iamVjdChidWlsZFBsYWNlbWVudEJvYXJkKEdhbWVMb29wLnBsYXllcnNbMF0pLCBcIiNwbGF5ZXJCb2FyZFwiKTtcbiAgcmVuZGVyT2JqZWN0KFxuICAgIGNyZWF0ZU5ld0VsZW1lbnQoXG4gICAgICBcImRpdlwiLFxuICAgICAgXCJzaGlwQW5kRmxpcFwiLFxuICAgICAgYDxoMj5wbGFjZSB5b3VyICR7c2hpcFRvUGxhY2UubmFtZX08L2gyPjxidXR0b24gaWQ9XCJyb3RhdGVcIj5Sb3RhdGUgU2hpcDwvYnV0dG9uPmBcbiAgICApLFxuICAgIFwiI3NoaXBUeXBlXCJcbiAgKTtcbiAgbGV0IHNoaXBUb1BsYWNlSW5uZXJIdG1sID0gYDxkaXYgY2xhc3M9XCJjZWxsXCI+PC9kaXY+YDtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBzaGlwVG9QbGFjZS5sZW5ndGg7IGkrKykge1xuICAgIHNoaXBUb1BsYWNlSW5uZXJIdG1sICs9IGA8ZGl2IGNsYXNzPVwiY2VsbFwiPjwvZGl2PmA7XG4gIH1cbiAgcmVuZGVyT2JqZWN0KFxuICAgIGNyZWF0ZU5ld0VsZW1lbnQoXCJkaXZcIiwgYCR7c2hpcFRvUGxhY2UubmFtZX1gLCBgJHtzaGlwVG9QbGFjZUlubmVySHRtbH1gKSxcbiAgICBcIiNzaGlwVHlwZVwiXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZVNoaXAoKSB7XG4gIC8vIHN3YXAgdGhlIGhlaWdodCBhbmQgd2lkdGggb2YgdGhlIHNoaXAgZGl2XG4gIC8vIGNoYW5nZSBmcm9tIGZsZXgtZGlyZWN0aW9uOiByb3c7IHRvIGNvbHVtblxufVxuXG4vLyBidWlsZCB0aGUgcGxheWVyIDEgZ2FtZWJvYXJkXG5mdW5jdGlvbiBidWlsZFBsYWNlbWVudEJvYXJkKHBsYXllcikge1xuICBjb25zdCBwbGF5ZXJCb2FyZENvbnRhaW5lciA9IGNyZWF0ZU5ld0VsZW1lbnQoXCJkaXZcIiwgYGh1bWFuYCwgXCIgXCIpO1xuICBjb25zdCBib2FyZENvbnRhaW5lciA9IGNyZWF0ZU5ld0VsZW1lbnQoXCJkaXZcIiwgYGdyaWRpZnlgLCBcIiBcIik7XG4gIHBsYXllckJvYXJkQ29udGFpbmVyLmFwcGVuZENoaWxkKGJvYXJkQ29udGFpbmVyKTtcbiAgcGxheWVyLmdhbWVib2FyZC5nYW1lYm9hcmQuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgY29uc3Qgcm93RGl2ID0gY3JlYXRlTmV3RWxlbWVudChcImRpdlwiLCBcInJvd1wiLCBcIiBcIik7XG4gICAgcm93LmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgIGNvbnN0IGNlbGxEaXYgPSBjcmVhdGVOZXdFbGVtZW50KFwiZGl2XCIsIGBodW1hbmAsIFwiIFwiKTtcbiAgICAgIGNlbGxEaXYuY2xhc3NMaXN0LmFkZChcImNlbGxcIik7XG4gICAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIGNlbGwpIHtcbiAgICAgICAgY2VsbERpdi5zZXRBdHRyaWJ1dGUoYCR7cHJvcGVydHl9YCwgYCR7Y2VsbFtwcm9wZXJ0eV19YCk7XG4gICAgICB9XG4gICAgICByb3dEaXYuYXBwZW5kQ2hpbGQoY2VsbERpdik7XG4gICAgfSk7XG4gICAgYm9hcmRDb250YWluZXIuYXBwZW5kQ2hpbGQocm93RGl2KTtcbiAgfSk7XG4gIHJldHVybiBwbGF5ZXJCb2FyZENvbnRhaW5lcjtcbn1cblxuLy9cbmZ1bmN0aW9uIHJlbmRlck9iamVjdChEb21JdGVtVG9SZW5kZXIsIHdoZXJlVG9SZW5kZXIpIHtcbiAgY29uc3QgcmVuZGVyTG9jYXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHdoZXJlVG9SZW5kZXIpO1xuICByZW5kZXJMb2NhdGlvbi5hcHBlbmRDaGlsZChEb21JdGVtVG9SZW5kZXIpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVOZXdFbGVtZW50KHR5cGUsIGFkZENsYXNzLCBpbm5lckhUTUwpIHtcbiAgY29uc3QgZG9tRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSk7XG4gIGRvbUVsZW1lbnQuY2xhc3NMaXN0LmFkZChhZGRDbGFzcyk7XG4gIGRvbUVsZW1lbnQuaW5uZXJIVE1MID0gaW5uZXJIVE1MO1xuICByZXR1cm4gZG9tRWxlbWVudDtcbn1cblxuZXhwb3J0IHsgcmVuZGVyU2hpcE1vZHVsZSB9O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IEdhbWVMb29wIH0gZnJvbSBcIi4vZ2FtZUxvb3BcIjtcbmltcG9ydCB7IHJlbmRlclNoaXBNb2R1bGUgfSBmcm9tIFwiLi9wbGFjZVNoaXBzXCI7XG5cbmNvbnN0IGFsbEV2ZW50TGlzdGVuZXJzID0ge1xuICB0ZXN0OiB0cnVlLFxuICBhZGRQbGF5ZXIxTGlzdGVuZXI6ICgpID0+IHtcbiAgICBjb25zdCBwbGF5ZXJGb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbGF5ZXIxXCIpO1xuICAgIHBsYXllckZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29uc3QgcGxheWVyRGF0YSA9IG5ldyBGb3JtRGF0YShwbGF5ZXJGb3JtKTtcbiAgICAgIGNvbnN0IHBsYXllcjEgPSBwbGF5ZXJEYXRhLmdldChcInBsYXllclwiKTtcbiAgICAgIEdhbWVMb29wLnNldFBsYXllcnMocGxheWVyMSk7XG4gICAgICBlcmFzZVBhZ2VDb250ZW50KCk7XG4gICAgICAvLyBwbGFjZSB5b3VyIHNoaXBzXG4gICAgICByZW5kZXJTaGlwTW9kdWxlKEdhbWVMb29wLnBsYXllcnNbMF0uZ2FtZWJvYXJkLnNoaXBzWzNdKTtcbiAgICAgIC8vcmVuZGVyQm9hcmQoR2FtZUxvb3AucGxheWVyc1swXSwgR2FtZUxvb3AucGxheWVyc1swXS5odW1hbk9yQ29tcCk7XG5cbiAgICAgIC8vIHJlbmRlckJvYXJkKEdhbWVMb29wLnBsYXllcnNbMV0sIEdhbWVMb29wLnBsYXllcnNbMV0uaHVtYW5PckNvbXApO1xuICAgIH0pO1xuICB9LFxufTtcblxuZnVuY3Rpb24gZXJhc2VQYWdlQ29udGVudCgpIHtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jb250YWluZXJcIik7XG4gIHdoaWxlIChjb250YWluZXIuZmlyc3RDaGlsZCkge1xuICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIuZmlyc3RFbGVtZW50Q2hpbGQpO1xuICB9XG59XG5cbi8vIHJlbmRlcnMgYSBwbGF5ZXJzIGJvYXJkXG5mdW5jdGlvbiByZW5kZXJCb2FyZChwbGF5ZXIsIGh1bWFuT3JDb21wKSB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29udGFpbmVyXCIpO1xuICBjb25zdCBwbGF5ZXJCb2FyZENvbnRhaW5lciA9IGNyZWF0ZU5ld0VsZW1lbnQoXCJkaXZcIiwgYCR7aHVtYW5PckNvbXB9YCwgXCIgXCIpO1xuICBjb25zdCBib2FyZENvbnRhaW5lciA9IGNyZWF0ZU5ld0VsZW1lbnQoXCJkaXZcIiwgYGdyaWRpZnlgLCBcIiBcIik7XG4gIHBsYXllckJvYXJkQ29udGFpbmVyLmFwcGVuZENoaWxkKGJvYXJkQ29udGFpbmVyKTtcbiAgcGxheWVyLmdhbWVib2FyZC5nYW1lYm9hcmQuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgY29uc3Qgcm93RGl2ID0gY3JlYXRlTmV3RWxlbWVudChcImRpdlwiLCBcInJvd1wiLCBcIiBcIik7XG4gICAgcm93LmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgIGNvbnN0IGNlbGxEaXYgPSBjcmVhdGVOZXdFbGVtZW50KFwiZGl2XCIsIGAke2h1bWFuT3JDb21wfWAsIFwiIFwiKTtcbiAgICAgIGNlbGxEaXYuY2xhc3NMaXN0LmFkZChcImNlbGxcIik7XG4gICAgICByb3dEaXYuYXBwZW5kQ2hpbGQoY2VsbERpdik7XG4gICAgfSk7XG4gICAgYm9hcmRDb250YWluZXIuYXBwZW5kQ2hpbGQocm93RGl2KTtcbiAgfSk7XG4gIHBsYXllckJvYXJkQ29udGFpbmVyLmFwcGVuZENoaWxkKFxuICAgIGNyZWF0ZU5ld0VsZW1lbnQoXCJoNFwiLCBcImJvYXJkVGl0bGVcIiwgYFRoaXMgaXMgJHtwbGF5ZXIubmFtZX0ncyBib2FyZGApXG4gICk7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChwbGF5ZXJCb2FyZENvbnRhaW5lcik7XG59XG5cbi8vIGNyZWF0ZXMgYSBmYW5jeSBlbGVtZW50IHdpdGggY2xhc3MgYW5kIGlubnRlckhUTUwgaW1iZWRkZWRcbmZ1bmN0aW9uIGNyZWF0ZU5ld0VsZW1lbnQodHlwZSwgYWRkQ2xhc3MsIGlubmVySFRNTCkge1xuICBjb25zdCBkb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlKTtcbiAgZG9tRWxlbWVudC5jbGFzc0xpc3QuYWRkKGFkZENsYXNzKTtcbiAgZG9tRWxlbWVudC5pbm5lckhUTUwgPSBpbm5lckhUTUw7XG4gIHJldHVybiBkb21FbGVtZW50O1xufVxuXG5leHBvcnQgeyBhbGxFdmVudExpc3RlbmVycywgcmVuZGVyQm9hcmQgfTtcbiIsImltcG9ydCB7IGFsbEV2ZW50TGlzdGVuZXJzIH0gZnJvbSBcIi4vc2NyaXB0cy9kb21TdHVmZlwiO1xuaW1wb3J0IFwiLi9zdHlsZS5zY3NzXCI7XG5cbmFsbEV2ZW50TGlzdGVuZXJzLmFkZFBsYXllcjFMaXN0ZW5lcigpO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsIlNoaXAiLCJuYW1lIiwibG9jYXRpb25zIiwibnVtSGl0cyIsInBsYWNlU2hpcCIsInN0YXJ0aW5nQ2VsbHkiLCJzdGFydGluZ0NlbGx4IiwiYXhpcyIsInhfYXhpcyIsInlfYXhpcyIsImhpdCIsImNlbGwiLCJib3VuZGluY3JlYXNlWEF4aXMiLCJuZXdMb2NhdGlvbiIsImJpbmQiLCJib3VuZGluY3JlYXNlWUF4aXMiLCJjZWxsSGl0WSIsImNlbGxIaXRYIiwiZm9yRWFjaCIsImxvY2F0aW9uIiwiaXNTdW5rIiwiYnVpbGRHYW1lYm9hcmQiLCJnYW1lYm9hcmQiLCJib2FyZFJvdyIsImoiLCJ0aGlzQm9hcmRDZWxsIiwiYm9hdCIsInNob3RIZXJlIiwiZ2V0U2hpcEluZGV4Iiwic2hpcE5hbWUiLCJzaGlwSW5kZXgiLCJjb25zb2xlIiwibG9nIiwiR2FtZWJvYXJkIiwib3duZXIiLCJzaGlwcyIsInN0YXJ0aW5neSIsInN0YXJ0aW5neCIsImN1cnJlbnRHYW1lYm9hcmQiLCJuZXdTaGlwU3RhcnRpbmd5IiwibmV3U2hpcFN0YXJ0aW5neCIsIm5ld1NoaXBTaXplIiwidmFsaWRMb2NhdGlvbiIsIm5ld1NoaXAiLCJyb3ciLCJzaGlwTG9jYXRpb24iLCJjaGVja1ZhbGlkU2hpcExvY2F0aW9uIiwic2hpcCIsInRoaXNHYW1lYm9hcmQiLCJyZXR1cm5HYW1lYm9hcmQiLCJ1cGRhdGVHYW1lYm9hcmRXaXRoTmV3U2hpcExvY2F0aW9uIiwicmVjZWl2ZUF0dGFjayIsInlBeGlzIiwieEF4aXMiLCJib2F0SW5kZXgiLCJhbGxTdW5rIiwibnVtYmVyU3VuayIsIlBsYXllciIsImh1bWFuT3JDb21wIiwiaXNBY3RpdmVQbGF5ZXIiLCJhdHRhY2siLCJlbmVteSIsImF0dGFja1lBeGlzIiwiYXR0YWNrWGF4aXMiLCJiZWdpblR1cm4iLCJlbmRUdXJuIiwiSGVscGVyRnVuY3Rpb25zIiwicGxheWVyMU5hbWUiLCJwbGF5ZXIyTmFtZSIsIkdhbWVMb29wIiwicGxheWVycyIsInNldFBsYXllcnMiLCJuZXdQbGF5ZXJzIiwicmVuZGVyT2JqZWN0IiwiRG9tSXRlbVRvUmVuZGVyIiwid2hlcmVUb1JlbmRlciIsImNyZWF0ZU5ld0VsZW1lbnQiLCJ0eXBlIiwiYWRkQ2xhc3MiLCJpbm5lckhUTUwiLCJkb21FbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwicGxheWVyRm9ybSIsImdldEVsZW1lbnRCeUlkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInByZXZlbnREZWZhdWx0IiwicGxheWVyMSIsIkZvcm1EYXRhIiwiY29udGFpbmVyIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJlcmFzZVBhZ2VDb250ZW50Iiwic2hpcFRvUGxhY2UiLCJib2R5IiwibW9kdWxlQmFja2dyb3VuZCIsInBsYXllciIsInBsYXllckJvYXJkQ29udGFpbmVyIiwiYm9hcmRDb250YWluZXIiLCJyb3dEaXYiLCJjZWxsRGl2IiwicHJvcGVydHkiLCJidWlsZFBsYWNlbWVudEJvYXJkIiwic2hpcFRvUGxhY2VJbm5lckh0bWwiLCJyZW5kZXJTaGlwTW9kdWxlIiwiYWxsRXZlbnRMaXN0ZW5lcnMiXSwic291cmNlUm9vdCI6IiJ9